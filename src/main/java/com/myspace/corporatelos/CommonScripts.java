package com.myspace.corporatelos;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class CommonScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public CommonScripts() {
	}

	public static void getNextDealStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			if (kcontext.getVariable("nextStatus") != null
					&& kcontext.getVariable("nextStatus").toString().length() > 0)
				return;
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("refrencedata").toString());
			org.json.JSONArray dealStatusArray = responseJSON
					.getJSONArray("requestStagesLob");
			for (int i = 0; i < dealStatusArray.length(); i++) {
				org.json.JSONObject indDealLob = new org.json.JSONObject(
						dealStatusArray.get(i).toString());
				if (indDealLob.get("lobValue").equals(
						kcontext.getVariable("lineOfBusiness").toString())) {
					org.json.JSONArray dealStagesArray = indDealLob
							.getJSONArray("stages");
					for (int j = 0; j < dealStagesArray.length(); j++) {
						org.json.JSONObject indDealStage = new org.json.JSONObject(
								dealStagesArray.get(j).toString());
						if (indDealStage.get("stageId").equals(
								kcontext.getVariable("dealStatus").toString())) {
							org.json.JSONObject nextDealStatus = new org.json.JSONObject(
									dealStagesArray.get(j + 1).toString());
							String updatedDealStatus = nextDealStatus.get(
									"stageId").toString();
							kcontext.setVariable("nextStatus",
									updatedDealStatus);
							break;
						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getNextFacilityStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			if (kcontext.getVariable("nextStatus") != null
					&& kcontext.getVariable("nextStatus").toString().length() > 0)
				return;
			boolean isOfferDocumentRejected = false;
			if (kcontext.getVariable("isOfferDocumentRejected") != null) {
				isOfferDocumentRejected = Boolean.parseBoolean(kcontext
						.getVariable("isOfferDocumentRejected").toString());
			}
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("refrencedata").toString());
			org.json.JSONArray facilityStatusArray = responseJSON
					.getJSONArray("facilityStagesLob");
			for (int i = 0; i < facilityStatusArray.length(); i++) {
				org.json.JSONObject indFacilityLob = new org.json.JSONObject(
						facilityStatusArray.get(i).toString());
				if (indFacilityLob.get("lobValue").equals(
						kcontext.getVariable("lineOfBusiness").toString())
						&& indFacilityLob.get("purposeId").equals(
								kcontext.getVariable("purposeId").toString())) {
					org.json.JSONArray facilityStagesArray = indFacilityLob
							.getJSONArray("stages");
					for (int j = 0; j < facilityStagesArray.length(); j++) {
						if (kcontext.getVariable("approvalStatusId") != null
								&& kcontext.getVariable("approvalStatusId").toString().equals("02")) {
							org.json.JSONObject FacilityStage = new org.json.JSONObject(
									facilityStagesArray.get(j).toString());
							if (FacilityStage.get("stageValue").equals(
									"Complete")) {
								kcontext.setVariable("nextStatus",
										FacilityStage.get("stageId"));
								break;
							}
						} else if (isOfferDocumentRejected) {
							org.json.JSONObject FacilityStage = new org.json.JSONObject(
									facilityStagesArray.get(j).toString());
							if (FacilityStage.get("stageValue").equals(
									"Complete")) {
								kcontext.setVariable("nextStatus",
										FacilityStage.get("stageId"));
								break;
							}
						} else {
							org.json.JSONObject indFacilityStage = new org.json.JSONObject(
									facilityStagesArray.get(j).toString());
							if (indFacilityStage.get("stageId").equals(
									kcontext.getVariable("facilityStatus")
											.toString())) {
								if (indFacilityStage.get("stageValue").equals(
										"Complete")) {
									kcontext.setVariable("nextStatus", kcontext
											.getVariable("facilityStatus"));
									break;
								} else {

									org.json.JSONObject nextFacilityStatus = new org.json.JSONObject(
											facilityStagesArray.get(j + 1)
													.toString());
									String updatedFacilityStatus = nextFacilityStatus
											.get("stageId").toString();
									kcontext.setVariable("nextStatus",
											updatedFacilityStatus);
									break;

								}
							} else {
								continue;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void setDocumentList(
			org.kie.api.runtime.process.ProcessContext kcontext,
			com.google.gson.JsonObject documentData) {
		try {
			java.util.List<java.util.Map<String, String>> documentListMap = new java.util.ArrayList<java.util.Map<String, String>>();
			com.google.gson.JsonArray documentListArray = documentData
					.get("documentList") != null ? documentData.get(
					"documentList").getAsJsonArray() : null;
			if (documentListArray != null) {
				documentListArray
						.forEach(item -> {
							java.util.Map<String, String> documentMap = new java.util.HashMap<String, String>();
							com.google.gson.JsonObject documentEle = (com.google.gson.JsonObject) item;
							documentMap.put("documentId", documentEle
									.get("documentId") != null ? documentEle
									.get("documentId").getAsString() : "");
							System.out.println(documentEle.get("documentId")
									.getAsString());
							documentMap.put("category",
									documentEle.get("category") != null
											? documentEle.get("category")
													.getAsString() : "");
							documentMap.put("documentName", documentEle
									.get("documentName") != null ? documentEle
									.get("documentName").getAsString() : "");
							documentMap.put("fileName",
									documentEle.get("fileName") != null
											? documentEle.get("fileName")
													.getAsString() : "");
						    documentMap.put("fileSize",
									documentEle.get("fileSize") != null
											? documentEle.get("fileSize")
													.getAsString() : "");
							documentMap.put("metaDocumentName", documentEle
									.get("metaDocumentName") != null
									? documentEle.get("metaDocumentName")
											.getAsString() : "");
							documentMap.put("documentType", documentEle
									.get("documentType") != null ? documentEle
									.get("documentType").getAsString() : "");
							documentMap.put("documentStatus", documentEle
									.get("documentStatus") != null
									? documentEle.get("documentStatus")
											.getAsString() : "");
							documentMap.put("partyId", documentEle
									.get("referenceId") != null ? documentEle
									.get("referenceId").getAsString() : "");
							documentMap.put("appEvidenceId", documentEle
									.get("appEvidenceId") != null ? documentEle
									.get("appEvidenceId").getAsString() : "");
							documentMap.put("isReusable", documentEle
									.get("isReusable") != null ? documentEle
									.get("isReusable").getAsString() : "");
							documentMap.put("lineOfBusiness", kcontext
									.getVariable("lineOfBusiness").toString());
							documentMap.put("isSystemGenerated", "false");
							documentListMap.add(documentMap);
						});
				kcontext.setVariable("documents", documentListMap);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkFacilityPurpose(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			System.out.println("Str: " + responseJSON.toString());
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			boolean isModifiedFac = false;
			boolean isnewFac = false;
			java.util.ArrayList<String> modifiedFacList = new java.util.ArrayList<>();
			java.util.ArrayList<String> newFacList = new java.util.ArrayList<>();
			java.util.Map<String, String> ammendmentMap = new java.util.HashMap<String, String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.has("previousFacilityId")
						&& facilityObj.get("previousFacilityId").toString() != null) {
					modifiedFacList.add(facilityObj.get("facilityId")
							.toString());
					if (facilityObj.get("facilityId").toString() != null
							&& facilityObj.get("amendmentTypes").toString() != null) {
						ammendmentMap.put(facilityObj.get("facilityId")
								.toString(), facilityObj.get("amendmentTypes")
								.toString());
					}
				} else {
					newFacList.add(facilityObj.get("facilityId").toString());
				}
			}
			if (!modifiedFacList.isEmpty()) {
				isModifiedFac = true;
			}
			if (!newFacList.isEmpty()) {
				isnewFac = true;
			}
			kcontext.setVariable("isModifiedFacility", isModifiedFac);
			kcontext.setVariable("modifiedFacilityList", modifiedFacList);
			kcontext.setVariable("isNewFacility", isnewFac);
			kcontext.setVariable("newFacilityList", newFacList);
			kcontext.setVariable("ammendmentMap", ammendmentMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

}