package com.myspace.corporatelos.duediligence;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class DueDiligenceScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public DueDiligenceScripts() {
	}

	public static void checkLTVRatio(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (responseObj.has("collaterals")) {
				org.json.JSONArray collaterals = responseObj
						.getJSONArray("collaterals");
				System.out.println(collaterals.toString());
				org.json.JSONObject indObj = (org.json.JSONObject) collaterals
						.get(0);
				org.json.JSONObject indCollateral = new org.json.JSONObject(
						indObj.get("collateralOverview").toString());
				if (!indCollateral.isNull("ltvRatio")
						&& !indCollateral.get("ltvRatio").equals("")) {
					String ltvStr = indCollateral.get("ltvRatio").toString();
					Double ltv = Double.parseDouble(ltvStr);
					if (ltv <= 100) {
						kcontext.setVariable("result", true);
					} else {
						kcontext.setVariable("result", false);
					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkPartyDetail(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject partyObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (!partyObj.isNull("firstName")) {
				kcontext.setVariable("nameCheck", true);
			} else {
				kcontext.setVariable("nameCheck", false);
			}
			org.json.JSONArray addressesArray = partyObj
					.getJSONArray("addresses");
			if (addressesArray.length() > 0) {
				for (int i = 0; i < addressesArray.length(); i++) {
					org.json.JSONObject indAddress = new org.json.JSONObject(
							addressesArray.get(i).toString());
					Boolean addCheck = (Boolean) indAddress.get("primary");
					if (addCheck) {
						kcontext.setVariable("addressCheck", true);
						break;
					} else {
						kcontext.setVariable("addressCheck", false);
					}
				}
				for (int i = 0; i < addressesArray.length(); i++) {
					org.json.JSONObject indAddress = new org.json.JSONObject(
							addressesArray.get(i).toString());
					if (!indAddress.isNull("phoneNo")) {
						kcontext.setVariable("phoneNoCheck", true);
						break;
					} else {
						kcontext.setVariable("phoneNoCheck", false);
					}
				}

			} else {
				kcontext.setVariable("addressCheck", false);
				kcontext.setVariable("phoneNoCheck", false);
			}
			Boolean name = (Boolean) kcontext.getVariable("nameCheck");
			Boolean phoneNo = (Boolean) kcontext.getVariable("phoneNoCheck");
			Boolean addressType = (Boolean) kcontext
					.getVariable("addressCheck");

			if (name && addressType && phoneNo) {
				kcontext.setVariable("result", true);
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkConditionsSatisfication(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject conditionResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (conditionResp.has("decisions")) {
				org.json.JSONArray decisionArray = conditionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject conditionObject = new org.json.JSONObject(
								decisionArray.get(i).toString());
						org.json.JSONArray conditionArray = conditionObject
								.getJSONArray("conditions");
						if (conditionArray.length() > 0) {
							for (int j = 0; j < conditionArray.length(); j++) {
								org.json.JSONObject indEle = new org.json.JSONObject(
										conditionArray.get(j).toString());
								if (!indEle.isNull("conditionType")
										&& (indEle.get("conditionType")
												.equals("01"))) {
									if (!indEle.isNull("conditionStatus")
											&& (indEle.get("conditionStatus")
													.equals("01"))) {
										kcontext.setVariable("result", false);
										break;
									} else {
										kcontext.setVariable("result", true);
									}
								} else {
									kcontext.setVariable("result", true);
								}
							}
						} else {
							kcontext.setVariable("result", true);
						}
					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkCompliance(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject complianceResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (complianceResp.has("compliances")) {
				org.json.JSONArray compArray = complianceResp
						.getJSONArray("compliances");
				if (compArray.length() > 0) {
					for (int i = 0; i < compArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								compArray.get(i).toString());
						if (!indEle.isNull("status")
								&& (indEle.get("status").equals("01") || indEle
										.get("status").equals("02"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkAccountStatement(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray documents = responseObj
					.getJSONArray("documents");
			if (documents.length() > 0) {
				for (int i = 0; i < documents.length(); i++) {
					org.json.JSONObject indDocument = new org.json.JSONObject(
							documents.get(i).toString());
					if (indDocument.get("documentType").equals("acc_stmnt")
							&& indDocument.get("documentCategory").equals(
									"collatrl_doc")) {
						kcontext.setVariable("result", true);
						break;
					} else {
						kcontext.setVariable("result", false);
					}
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkEnvironmentalReport(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray documents = responseObj
					.getJSONArray("documents");
			if (documents.length() > 0) {
				for (int i = 0; i < documents.length(); i++) {
					org.json.JSONObject indDocument = new org.json.JSONObject(
							documents.get(i).toString());
					if (indDocument.get("documentType").equals("envmntl")
							&& indDocument.get("documentCategory").equals(
									"collatrl_doc")) {
						kcontext.setVariable("result", true);
						break;
					} else {
						kcontext.setVariable("result", false);
					}
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkDealConditionsSatisfication(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			boolean resultFlag = true;
			org.json.JSONObject conditionResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (conditionResp.has("decisions")) {
				org.json.JSONArray decisionArray = conditionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject conditionObject = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if (conditionObject.get("facilityId").toString()
								.equals("")
								|| conditionObject.get("facilityId") == null) {
							org.json.JSONArray conditionArray = conditionObject
									.getJSONArray("conditions");
							if (conditionArray.length() > 0) {
								for (int j = 0; j < conditionArray.length(); j++) {
									org.json.JSONObject indEle = new org.json.JSONObject(
											conditionArray.get(j).toString());
									if (!indEle.isNull("conditionType")
											&& (indEle.get("conditionType")
													.equals("01"))) {
										if (!indEle.isNull("conditionStatus")
												&& (indEle
														.get("conditionStatus")
														.equals("01"))) {
											resultFlag = false;
											break;
										}
									}
								}
							}
						}
						if (!resultFlag) {
							break;
						}
					}
				}
			}
			if (resultFlag) {
				kcontext.setVariable("result", true);
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void checkDealCompliance(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject complianceResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (complianceResp.has("compliances")) {
				org.json.JSONArray compArray = complianceResp
						.getJSONArray("compliances");
				if (compArray.length() > 0) {
					for (int i = 0; i < compArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								compArray.get(i).toString());
						if ((indEle.get("facilityId") == null
								&& indEle.get("partyId") == null && indEle
								.get("collateralId") == null)
								|| indEle.get("facilityId").toString()
										.equals("")) {
							if (!indEle.isNull("status")
									&& (indEle.get("status").equals("01") || indEle
											.get("status").equals("02"))) {
								kcontext.setVariable("result", true);
							} else {
								kcontext.setVariable("result", false);
								break;
							}
						}
					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

}