package com.myspace.corporatelos.underwriting;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class UnderwritingScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public UnderwritingScripts() {
	}

	public static void checkDecisions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					System.out.println("num: "
							+ kcontext.getVariable("num").toString()
							+ "  array Length: " + decisionArray.length());
					if (decisionArray.length() >= Integer.parseInt(kcontext
							.getVariable("num").toString())) {
						kcontext.setVariable("result", true);
					} else {
						kcontext.setVariable("result", false);
					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareCustomerMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			java.util.HashMap requestMap = new java.util.HashMap();
			requestMap.put("firstName", kcontext.getVariable("firstName")
					.toString());
			requestMap.put("Country", "US");

			kcontext.setVariable("payloadMap", requestMap);
			System.out.println("requestMap: " + requestMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void prepareFullfillmentVariables(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("facilityResponse").toString());

			if (kcontext.getVariable("purposeId").toString() != null
					&& kcontext.getVariable("purposeId").toString()
							.equals("03")) {
				if (kcontext.getVariable("effectiveDate").toString() != null) {
					kcontext.setVariable("effectiveDate",
							kcontext.getVariable("effectiveDate").toString());
				}
			} else {
				if (responseObj.has("startDate")) {
					kcontext.setVariable("effectiveDate",
							responseObj.get("startDate").toString());
				} else {
					java.util.Date date = new java.util.Date();
					java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
							"yyyy-MM-dd");
					String currDate = sdf.format(date).toString();
					kcontext.setVariable("effectiveDate", currDate);
				}
			}
			System.out.println("Amount: "
					+ new java.math.BigDecimal(responseObj.get("totalAmount")
							.toString()));
			kcontext.setVariable("amount", new java.math.BigDecimal(responseObj
					.get("approvedAmount").toString()));

			Integer year = 0;
			Integer month = 0;
			Integer days = 0;
			if (!responseObj.isNull("year")
					&& !responseObj.get("year").equals("")) {
				year = Integer.parseInt(responseObj.get("year").toString());
			}
			if (!responseObj.isNull("month")
					&& !responseObj.get("month").equals("")) {
				month = Integer.parseInt(responseObj.get("month").toString());
			}
			if (!responseObj.isNull("days")
					&& !responseObj.get("days").equals("")) {
				days = Integer.parseInt(responseObj.get("days").toString());
			}
			Integer noOfDays = year * 365 + month * 30 + days;
			System.out.println(noOfDays);
			String facilityTerm = noOfDays.toString() + "D";
			System.out.println("Str: " + facilityTerm);
			kcontext.setVariable("term", facilityTerm);
			String facilityType = kcontext.getVariable("facilityTypeVal")
					.toString();
			System.out.println("facilityType: " + facilityType);
			if (!facilityType.equals("REVOLVING.FACILITY")) {
				kcontext.setVariable("productId", "TERM.FACILITY");
			} else {
				kcontext.setVariable("productId", facilityType);
			}
			System.out.println("currencyId: "
					+ responseObj.get("currencyId").toString());
			kcontext.setVariable("currencyId", responseObj.get("currencyId")
					.toString());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareFullfillmentMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			java.util.HashMap requestMap = new java.util.HashMap();
			requestMap.put("amount", kcontext.getVariable("amount").toString());
			requestMap.put("upfrontChargeAmount",
					kcontext.getVariable("upfrontChargeAmount").toString());
			requestMap.put("term", kcontext.getVariable("term").toString());
			requestMap.put("productId", kcontext.getVariable("productId")
					.toString());
			requestMap.put("currency", kcontext.getVariable("currencyId")
					.toString());
			requestMap.put("effectiveDate",
					kcontext.getVariable("effectiveDate").toString());
			java.util.ArrayList<java.util.HashMap<String, String>> list = (java.util.ArrayList<java.util.HashMap<String, String>>) kcontext
					.getVariable("customerList");
			com.google.gson.JsonArray cusList = new com.google.gson.JsonArray();
			for (int i = 0; i < list.size(); i++) {
				java.util.HashMap<String, String> Obj = (java.util.HashMap<String, String>) list
						.get(i);
				com.google.gson.JsonObject objToPush = new com.google.gson.JsonObject();
				for (java.util.Map.Entry entry : Obj.entrySet()) {
					objToPush.addProperty(entry.getKey().toString(), entry
							.getValue().toString());
				}
				cusList.add(objToPush);
			}
			java.util.ArrayList<java.util.HashMap<String, String>> list1 = (java.util.ArrayList<java.util.HashMap<String, String>>) kcontext
					.getVariable("restrictionFinalList");
			com.google.gson.JsonArray resList = new com.google.gson.JsonArray();
			for (int i = 0; i < list1.size(); i++) {
				java.util.HashMap<String, String> Obj = (java.util.HashMap<String, String>) list1
						.get(i);
				com.google.gson.JsonObject objToPush = new com.google.gson.JsonObject();
				for (java.util.Map.Entry entry : Obj.entrySet()) {
					objToPush.addProperty(entry.getKey().toString(), entry
							.getValue().toString());
				}
				resList.add(objToPush);
			}
			System.out.println("CustomerLIST*************" + cusList);
			System.out.println("RestrictionLIST*************" + resList);
			requestMap.put("customers", cusList);
			requestMap.put("commitment", resList);
			if (resList.size() > 0) {
				requestMap.put("commitmentType", "COMMITMENT.SCHEDULE");
			}
			if (kcontext.getVariable("purposeId").toString() != null
					&& kcontext.getVariable("purposeId").toString()
							.equals("03")) {
				if (kcontext.getVariable("dealArrangementId").toString() != null) {
					requestMap.put("dealId",
							kcontext.getVariable("dealArrangementId")
									.toString());
				}
			}

			kcontext.setVariable("payloadMap", requestMap);
			System.out.println("requestMap: " + requestMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareProcessesList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			java.util.ArrayList procList = new java.util.ArrayList();
			boolean modifiedFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isModifiedFacility").toString());
			boolean newFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isNewFacility").toString());
			if (newFlag) {
				procList.add("CorporateLOS.ReviewStructure");
				procList.add("CorporateLOS.ReviewCollateral");
				procList.add("CorporateLOS.ReviewSpreadingResults");
				procList.add("CorporateLOS.ReviewLimits");
				procList.add("InfinityAssist.ReviewComplianceAndPolicyExceptions");
				procList.add("CorporateLOS.AdditionalInfoRequired");
			}
			if (modifiedFlag) {
				procList.add("InfinityAssist.ReviewModificationFacility");
			}

			kcontext.setVariable("processesList", procList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
}