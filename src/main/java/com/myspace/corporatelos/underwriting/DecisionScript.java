package com.myspace.corporatelos.underwriting;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class DecisionScript implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public DecisionScript() {
	}

	public static void addFacilityApproverInfoDE(
			org.kie.api.runtime.process.ProcessContext kcontext, String facility) {
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
		facilityApproverInfoData.put("requestId",
				kcontext.getVariable("requestId").toString());
		facilityApproverInfoData.put("facilityId", facility);
		facilityApproverInfoData.put("approverUserId", "decisionEngine");
		facilityApproverInfoData.put("approverRoleId", "Approver");
		facilityApproverList.add(facilityApproverInfoData);
		requestMap.put("facilityApproverInfo", facilityApproverList);
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void getFacilitiesOfRequest(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			System.out.println("Response: " + responseJSON.toString());
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.ArrayList facilityList = new java.util.ArrayList();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				facilityList.add(facilityObj.get("facilityId").toString());
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void addApprovedDecision(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList committeeDecisionList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap decisionInfoData = new java.util.HashMap();
		decisionInfoData.put("requestId", kcontext.getVariable("requestId")
				.toString());
		decisionInfoData.put("facilityId", kcontext.getVariable("facilityId")
				.toString());
		decisionInfoData.put("partyId", kcontext.getVariable("partyId")
				.toString());
		decisionInfoData.put("approvedAmount",
				kcontext.getVariable("approvedAmount").toString());
		decisionInfoData.put("currencyId", kcontext.getVariable("currencyId")
				.toString());
		decisionInfoData.put("approverUserId", "decisionEngine");
		decisionInfoData.put("decisionId", kcontext.getVariable("decisionId")
				.toString());
		decisionInfoData.put("lastChangeUserId", "decisionEngine");
		decisionInfoData.put("decisionComment", "");
		decisionInfoData.put("finalDecision", true);
		java.util.Date date = new java.util.Date();
		java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
				"yyyy-MM-dd");
		decisionInfoData.put("decisionDate", sdf.format(date).toString());
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.add(java.util.Calendar.MONTH, 1);
		decisionInfoData
				.put("expiryDate", sdf.format(cal.getTime()).toString());
		committeeDecisionList.add(decisionInfoData);
		requestMap.put("creditDecisionItems", committeeDecisionList);
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void addDeclinedDecision(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList committeeDecisionList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap decisionInfoData = new java.util.HashMap();
		decisionInfoData.put("requestId", kcontext.getVariable("requestId")
				.toString());
		decisionInfoData.put("facilityId", kcontext.getVariable("facilityId")
				.toString());
		decisionInfoData.put("partyId", kcontext.getVariable("partyId")
				.toString());
		decisionInfoData.put("approverUserId", "decisionEngine");
		decisionInfoData.put("decisionId", kcontext.getVariable("decisionId")
				.toString());
		decisionInfoData.put("lastChangeUserId", "decisionEngine");
		decisionInfoData.put("decisionComment", "");
		decisionInfoData.put("finalDecision", true);
		java.util.Date date = new java.util.Date();
		java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
				"yyyy-MM-dd");
		decisionInfoData.put("decisionDate", sdf.format(date).toString());
		java.util.Calendar cal = java.util.Calendar.getInstance();
		cal.add(java.util.Calendar.MONTH, 1);
		decisionInfoData
				.put("expiryDate", sdf.format(cal.getTime()).toString());
		committeeDecisionList.add(decisionInfoData);
		requestMap.put("creditDecisionItems", committeeDecisionList);
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void getIndividualFacilityApprover(
			org.kie.api.runtime.process.ProcessContext kcontext, String facility) {

		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject facilityApproversObj = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (facilityApproversObj.has("facilityApproverInfo")) {
				org.json.JSONArray approversArr = facilityApproversObj
						.getJSONArray("facilityApproverInfo");
				System.out.println(approversArr.toString());
				for (int i = 0; i < approversArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							approversArr.get(i).toString());
					if (currentObj.get("facilityId").toString()
							.equals(facility)) {
						kcontext.setVariable("indApprover",
								currentObj.get("approverUserId").toString());
					}
				}
			}
			kcontext.setVariable("isCommittee", false);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void separateCommitteeAndIndividualApproverFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject facilityApproversObj = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (facilityApproversObj.has("facilityApproverInfo")) {
				org.json.JSONArray approversArr = facilityApproversObj
						.getJSONArray("facilityApproverInfo");
				System.out.println(approversArr.toString());
				java.util.ArrayList<String> indApproverFacilityList = new java.util.ArrayList<String>();
				java.util.ArrayList<String> committeesList = new java.util.ArrayList<String>();
				java.util.HashMap<String, java.util.ArrayList<String>> committeeFacilitiesMap = new java.util.HashMap<String, java.util.ArrayList<String>>();
				for (int i = 0; i < approversArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							approversArr.get(i).toString());
					if (currentObj.has("committeeId")
							&& !currentObj.get("committeeId").toString()
									.isEmpty()) {
						if (committeeFacilitiesMap.containsKey(currentObj.get(
								"committeeId").toString())) {
							java.util.ArrayList<String> committeeFacilityArr = committeeFacilitiesMap
									.get(currentObj.get("committeeId")
											.toString());
							if (!committeeFacilityArr.contains(currentObj.get(
									"facilityId").toString())) {
								committeeFacilityArr.add(currentObj.get(
										"facilityId").toString());
								committeeFacilitiesMap.put(
										currentObj.get("committeeId")
												.toString(),
										committeeFacilityArr);
							}

						} else {
							java.util.ArrayList<String> facilitiesList = new java.util.ArrayList<String>();
							facilitiesList.add(currentObj.get("facilityId")
									.toString());
							committeeFacilitiesMap.put(
									currentObj.get("committeeId").toString(),
									facilitiesList);
							if (!committeesList.contains(currentObj.get(
									"committeeId").toString())) {
								committeesList.add(currentObj
										.get("committeeId").toString());
							}
						}
					} else {
						if (!currentObj.get("approverUserId").toString()
								.equals("decisionEngine")) {
							if (!indApproverFacilityList.contains(currentObj
									.get("facilityId").toString())) {
								indApproverFacilityList.add(currentObj.get(
										"facilityId").toString());
							}
						}
					}
				}
				kcontext.setVariable("indApproversFacilityList",
						indApproverFacilityList);
				kcontext.setVariable("committeeFacilityMap",
						committeeFacilitiesMap);
				kcontext.setVariable("committeeList", committeesList);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getFacilitiesAssignedToACommittee(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String committee) {
		java.util.HashMap<String, java.util.ArrayList<String>> committeeFacilityMapping = new java.util.HashMap<String, java.util.ArrayList<String>>();
		committeeFacilityMapping = (java.util.HashMap<String, java.util.ArrayList<String>>) (kcontext
				.getVariable("committeeFacilityMap"));
		java.util.ArrayList<String> facilitiesList = new java.util.ArrayList<String>();
		if (committeeFacilityMapping.containsKey(committee)) {
			facilitiesList = (java.util.ArrayList<String>) (committeeFacilityMapping
					.get(committee));
		}
		kcontext.setVariable("committeeFacilities", facilitiesList);

	}

	public static void addFacilityApproverInfowhenAMOff(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
		facilityApproverInfoData.put("requestId",
				kcontext.getVariable("requestId").toString());
		facilityApproverInfoData.put("facilityId",
				kcontext.getVariable("facilityId").toString());
		facilityApproverInfoData.put("approverUserId", "Underwriter");
		facilityApproverInfoData.put("approverRoleId", "Approver");
		facilityApproverList.add(facilityApproverInfoData);
		requestMap.put("facilityApproverInfo", facilityApproverList);
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void getFacilityDetails(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject decisionObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionObj.has("facilityType")) {
				kcontext.setVariable("facilityTypeId",
						decisionObj.get("facilityType").toString());
			}
			if (decisionObj.has("totalAmount")) {
				kcontext.setVariable("facilityAmount",
						decisionObj.get("totalAmount").toString());
			}
			if (decisionObj.has("securityCoverage")
					&& !decisionObj.get("securityCoverage").toString()
							.isEmpty()) {
				kcontext.setVariable("securityCoverage",
						decisionObj.get("securityCoverage"));
			} else {
				kcontext.setVariable("securityCoverage", 0);
			}
			if (decisionObj.has("previousFacilityId")) {
				kcontext.setVariable("isModified", true);
			} else {
				kcontext.setVariable("isModified", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getProductName(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject productObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (productObj.has("productGroups")) {
				org.json.JSONArray productsGroupsArr = productObj
						.getJSONArray("productGroups");
				System.out.println("ProductGroupArray: "
						+ productsGroupsArr.toString());
				for (int i = 0; i < productsGroupsArr.length(); i++) {
					org.json.JSONObject currentProductGroupsObj = new org.json.JSONObject(
							productsGroupsArr.get(i).toString());
					if (currentProductGroupsObj.has("products")) {
						org.json.JSONArray productsArr = currentProductGroupsObj
								.getJSONArray("products");
						for (int j = 0; j < productsArr.length(); j++) {
							org.json.JSONObject currentProductObj = new org.json.JSONObject(
									productsArr.get(j).toString());
							if (currentProductObj
									.get("productRef")
									.toString()
									.equals(kcontext.getVariable(
											"facilityTypeId").toString())) {
								kcontext.setVariable("facilityTypeVal",
										currentProductObj.get("productName")
												.toString());
								break;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void processAMOutput(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("AM Output: "
					+ kcontext.getVariable("approvalMatrixOutput"));
			java.util.HashMap outputAM = (java.util.HashMap) kcontext
					.getVariable("approvalMatrixOutput");
			System.out.println("APPROVER :"
					+ outputAM.get("approver").toString());
			kcontext.setVariable("committeeRole", outputAM.get("approver")
					.toString());
			if (outputAM.get("approver").toString().equals("Committee")) {
				kcontext.setVariable("isCommittee", true);
				kcontext.setVariable("committeeName", outputAM.get("name")
						.toString());
			} else {
				kcontext.setVariable("isCommittee", false);
				kcontext.setVariable("committeeName", "");
			}
			if (kcontext.getVariable("isModified").toString().equals("true")) {
				kcontext.setVariable("isCommittee", false);
				kcontext.setVariable("committeeName", "");
			}
			System.out.println(kcontext.getVariable("isCommittee").toString());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void addFacilityApproverInfoInd(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
		facilityApproverInfoData.put("requestId",
				kcontext.getVariable("requestId").toString());
		facilityApproverInfoData.put("facilityId",
				kcontext.getVariable("facilityId").toString());
		facilityApproverInfoData.put("approverUserId",
				kcontext.getVariable("committeeRole").toString());
		facilityApproverInfoData.put("approverRoleId", "Approver");
		facilityApproverList.add(facilityApproverInfoData);
		requestMap.put("facilityApproverInfo", facilityApproverList);
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void addFacilityApproverInfoCommittee(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.ArrayList listapprovers = new java.util.ArrayList();
		listapprovers = (java.util.ArrayList) kcontext
				.getVariable("approverList");
		System.out.println(listapprovers.toString());
		for (int i = 0; i < listapprovers.size(); i++) {
			java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
			facilityApproverInfoData.put("requestId",
					kcontext.getVariable("requestId").toString());
			facilityApproverInfoData.put("facilityId",
					kcontext.getVariable("facilityId").toString());
			facilityApproverInfoData.put("committeeId",
					kcontext.getVariable("committeeName").toString());
			facilityApproverInfoData.put("approverUserId", listapprovers.get(i)
					.toString());
			facilityApproverInfoData.put("approverRoleId", "Committee Member");
			facilityApproverList.add(facilityApproverInfoData);
		}
		requestMap.put("facilityApproverInfo", facilityApproverList);
		System.out.println("requestMap: " + requestMap.toString());
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void getCommitteeMembers(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject committeeInfoObj = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			System.out.println("committeeInfoObj: "
					+ kcontext.getVariable("response").toString());
			if (committeeInfoObj.has("creditCommitteeInfo")) {
				org.json.JSONArray committeeInfoArr = committeeInfoObj
						.getJSONArray("creditCommitteeInfo");
				java.util.ArrayList<String> committeeMembers = new java.util.ArrayList<String>();
				for (int i = 0; i < committeeInfoArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							committeeInfoArr.get(i).toString());
					if (currentObj.has("members")) {
						org.json.JSONArray approversArr = currentObj
								.getJSONArray("members");
						for (int j = 0; j < approversArr.length(); j++) {
							org.json.JSONObject currentApprover = new org.json.JSONObject(
									approversArr.get(j).toString());
							committeeMembers.add(currentApprover
									.get("memberId").toString());
						}
					}
				}
				kcontext.setVariable("approverList", committeeMembers);
				System.out.println("committeeApprovers: "
						+ kcontext.getVariable("approverList"));
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void verifyCommitteeDecisions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if ((decisionObj.get("approverUserId").toString())
								.equals(kcontext.getVariable("approver")
										.toString())
								&& decisionObj.has("committeeId")
								&& (decisionObj.get("committeeId").toString())
										.equals(kcontext.getVariable(
												"committeeId").toString())) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}
					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getCurrentIndividualAssignedUser(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject facilityCommitteeData = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (facilityCommitteeData.has("facilityApproverInfo")) {
				org.json.JSONArray currentApproverData = facilityCommitteeData
						.getJSONArray("facilityApproverInfo");
				System.out.println("CurrentRowInfo: "
						+ currentApproverData.toString());
				for (int i = 0; i < currentApproverData.length(); i++) {
					org.json.JSONObject approverData = (org.json.JSONObject) currentApproverData
							.get(i);
					if (approverData.has("approverUserId")
							&& approverData.get("approverUserId") != null) {
						kcontext.setVariable("approverUser",
								approverData.get("approverUserId").toString());
					}
				}
			}
			System.out.println("CurrentAssignedUser: "
					+ kcontext.getVariable("approverUser").toString());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void verifyIndividualDecisions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if ((!decisionObj.has("committeeId") || decisionObj
								.get("committeeId").toString().isEmpty())
								&& (decisionObj.get("approverUserId")
										.toString())
										.equals(kcontext.getVariable(
												"approverUser").toString())
								&& decisionObj.has("finalDecision")) {
							if ((decisionObj.get("decisionId").toString()
									.equals("02") || decisionObj
									.get("decisionId").toString().equals("03"))
									&& decisionObj.get("finalDecision")
											.toString().equals("true")) {
								kcontext.setVariable("result", "true");
								break;
							} else if ((decisionObj.get("decisionId")
									.toString().equals("01") || decisionObj
									.get("decisionId").toString().equals("04"))
									&& decisionObj.get("finalDecision")
											.toString().equals("false")) {
								kcontext.setVariable("result",
										"finalIndividualTask");
							}
						} else {
							kcontext.setVariable("result", "individualTask");
						}
					}
				} else {
					kcontext.setVariable("result", "individualTask");
				}
			} else {
				kcontext.setVariable("result", "individualTask");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void verifySecretaryDecisions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.ArrayList finalDecsFac = new java.util.ArrayList();
			if (kcontext.getVariable("finalFacilities") != null) {
				finalDecsFac = (java.util.ArrayList) kcontext
						.getVariable("finalFacilities");
			}
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if (kcontext.getVariable("committeeSecretary") != null) {
							if (decisionObj.has("finalDecision")
									&& decisionObj.get("finalDecision")
											.toString().equals("true")
									&& decisionObj.has("committeeId")
									&& (decisionObj.get("committeeId")
											.toString()).equals(kcontext
											.getVariable("committeeId")
											.toString())
									&& decisionObj.has("approverUserId")
									&& (decisionObj.get("approverUserId")
											.toString()).equals(kcontext
											.getVariable("committeeSecretary")
											.toString())) {
								if (!finalDecsFac.contains(decisionObj.get(
										"facilityId").toString())) {
									finalDecsFac.add(decisionObj.get(
											"facilityId").toString());
								}
							}
						}
					}
				}
			}
			kcontext.setVariable("finalFacilities", finalDecsFac);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getCommitteeFinalResult(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.ArrayList finalDecFacilities = (java.util.ArrayList) kcontext
					.getVariable("finalFacilities");
			java.util.ArrayList comFacilities = (java.util.ArrayList) kcontext
					.getVariable("committeeFacList");
			if (finalDecFacilities.size() >= comFacilities.size()) {
				kcontext.setVariable("result", true);
			} else {
				kcontext.setVariable("result", false);
				finalDecFacilities.clear();
				kcontext.setVariable("finalFacilities", finalDecFacilities);
			}
			Integer counter = Integer.parseInt(kcontext.getVariable("count")
					.toString());
			counter = counter + 1;
			kcontext.setVariable("count", Integer.toString(counter));
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getDecisionToUpdateFacility(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			boolean finalDecisionObj = false;
			String amendmentTypesInDecision = "";
			String approveMaturityDate = "";
			String approveAmount = "";
			boolean isModifiedFacility = Boolean.parseBoolean(kcontext
					.getVariable("isModified").toString());
			org.json.JSONObject decisionObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionObj.has("decisions")) {
				org.json.JSONArray decisionArr = decisionObj
						.getJSONArray("decisions");
				System.out.println(decisionArr.toString());
				java.util.ArrayList decisionLis = new java.util.ArrayList<>();
				for (int i = 0; i < decisionArr.length(); i++) {
					org.json.JSONObject decObj = new org.json.JSONObject(
							decisionArr.get(i).toString());
					if ((decObj.get("finalDecision").toString().equals("true"))
							&& ((decObj.get("approverUserId").toString())
									.equals(kcontext.getVariable("approver")
											.toString()))) {
						if (kcontext.getVariable("isCommitteeFacility")
								.toString().equals("true")) {
							if (decObj.has("committeeId")
									&& (decObj.get("committeeId").toString())
											.equals(kcontext.getVariable(
													"committeeId").toString())) {
								if (decObj.has("approvedAmount")
										&& decObj.get("approvedAmount") != null) {
									kcontext.setVariable("approvedAmount",
											decObj.get("approvedAmount")
													.toString());
									kcontext.setVariable("currencyId", decObj
											.get("currencyId").toString());
								}
								if (decObj.get("decisionId").toString()
										.equals("05")
										|| decObj.get("decisionId").toString()
												.equals("02")) {
									kcontext.setVariable("approvalStatusId",
											"01");
								} else if (decObj.get("decisionId").toString()
										.equals("06")
										|| decObj.get("decisionId").toString()
												.equals("03")) {
									kcontext.setVariable("approvalStatusId",
											"02");
								} else if (decObj.get("decisionId").toString()
										.equals("10")) {
									kcontext.setVariable("approvalStatusId",
											"07");
								}
								break;
							}

						} else {
							if (!isModifiedFacility) {
								if (decObj.has("approvedAmount")
										&& decObj.get("approvedAmount") != null) {
									kcontext.setVariable("approvedAmount",
											decObj.get("approvedAmount")
													.toString());
									kcontext.setVariable("currencyId", decObj
											.get("currencyId").toString());
								}
							}
							if (decObj.get("decisionId").toString()
									.equals("05")
									|| decObj.get("decisionId").toString()
											.equals("02")) {
								kcontext.setVariable("approvalStatusId", "01");
							} else if (decObj.get("decisionId").toString()
									.equals("06")
									|| decObj.get("decisionId").toString()
											.equals("03")) {
								kcontext.setVariable("approvalStatusId", "02");
							} else if (decObj.get("decisionId").toString()
									.equals("10")) {
								kcontext.setVariable("approvalStatusId", "07");
							}

							finalDecisionObj = true;
							if (isModifiedFacility) {
								amendmentTypesInDecision = decObj.get(
										"amendmentType").toString();
							}
							break;
						}
					}
				}
				if (finalDecisionObj) {
					if (isModifiedFacility) {
						String[] amendmentTypesArr = amendmentTypesInDecision
								.split(",");
						for (int index = 0; index < amendmentTypesArr.length; index++) {
							for (int decisionIndex = 0; decisionIndex < decisionArr
									.length(); decisionIndex++) {
								org.json.JSONObject indDecisionObj = new org.json.JSONObject(
										decisionArr.get(decisionIndex)
												.toString());
								if (indDecisionObj.has("finalDecision")
										&& !Boolean.parseBoolean(indDecisionObj
												.get("finalDecision")
												.toString())) {
									if (indDecisionObj.has("amendmentType")
											&& indDecisionObj
													.get("amendmentType")
													.toString()
													.equals(amendmentTypesArr[index])) {
										if (amendmentTypesArr[index]
												.equals("01")) {
											kcontext.setVariable(
													"approvedAmount",
													indDecisionObj.get(
															"approvedAmount")
															.toString());
											kcontext.setVariable(
													"currencyId",
													indDecisionObj.get(
															"currencyId")
															.toString());
											break;
										} else if (amendmentTypesArr[index]
												.equals("02")) {
											kcontext.setVariable(
													"approvedMaturityDate",
													indDecisionObj
															.get("approvedMaturityDate")
															.toString());
											break;
										}
									}
								}
							}
						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void updateFacilityApproval(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			com.google.gson.JsonObject respObj = new com.google.gson.JsonParser()
					.parse(kcontext.getVariable("facilityResponse").toString())
					.getAsJsonObject();
			System.out.println("resp obj: " + respObj);
			if (kcontext.getVariable("approvalStatusId") != null) {
				respObj.addProperty("approvalStatusId",
						kcontext.getVariable("approvalStatusId").toString());
				System.out.println("resp obj: " + respObj);
			}
			if (kcontext.getVariable("approvedAmount") != null) {
				respObj.addProperty("approvedAmount",
						kcontext.getVariable("approvedAmount").toString());
				respObj.addProperty("availableAmount",
						kcontext.getVariable("approvedAmount").toString());
				System.out.println("resp obj: " + respObj);
			}
			if (kcontext.getVariable("currencyId") != null) {
				respObj.addProperty("currencyId",
						kcontext.getVariable("currencyId").toString());
				System.out.println("resp obj: " + respObj);
			}
			if (kcontext.getVariable("approvedMaturityDate") != null) {
				respObj.addProperty("approvedMaturityDate", kcontext
						.getVariable("approvedMaturityDate").toString());
				System.out.println("resp obj: " + respObj);
			}
			com.google.gson.Gson gson = new com.google.gson.Gson();
			java.util.HashMap map = gson.fromJson(respObj,
					java.util.HashMap.class);
			System.out.println("map: " + map.entrySet());
			kcontext.setVariable("payloadMap", map);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getParticularFacilityApproverInfo(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject facilityCommitteeData = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (facilityCommitteeData.has("facilityApproverInfo")) {
				org.json.JSONArray currentApproverData = facilityCommitteeData
						.getJSONArray("facilityApproverInfo");
				System.out.println("CurrentRowInfo: "
						+ currentApproverData.toString());
				for (int i = 0; i < currentApproverData.length(); i++) {
					org.json.JSONObject approverData = (org.json.JSONObject) currentApproverData
							.get(i);
					if (!approverData.has("committeeId")) {
						kcontext.setVariable("approver",
								approverData.get("approverUserId").toString());
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getParticularCommitteeInfo(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject committeeInfoObj = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			System.out.println("committeeInfoObj: "
					+ kcontext.getVariable("response").toString());
			if (committeeInfoObj.has("creditCommitteeInfo")) {
				org.json.JSONArray committeeInfoArr = committeeInfoObj
						.getJSONArray("creditCommitteeInfo");
				java.util.ArrayList<String> committeeMembers = new java.util.ArrayList<String>();
				for (int i = 0; i < committeeInfoArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							committeeInfoArr.get(i).toString());
					if (currentObj.has("members")) {
						org.json.JSONArray approversArr = currentObj
								.getJSONArray("members");
						for (int j = 0; j < approversArr.length(); j++) {
							org.json.JSONObject currentApprover = new org.json.JSONObject(
									approversArr.get(j).toString());
							committeeMembers.add(currentApprover
									.get("memberId").toString());
						}
					}
					if (currentObj.has("secretaryId")) {
						kcontext.setVariable("committeeSecretary", currentObj
								.get("secretaryId").toString());
					}
				}
				kcontext.setVariable("committeeApprovers", committeeMembers);
				System.out.println("committeeApprovers: "
						+ kcontext.getVariable("committeeApprovers"));
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void addCommitteeSecretaryApproverInfo(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		java.util.HashMap requestMap = new java.util.HashMap();
		java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
		facilityApproverInfoData.put("requestId",
				kcontext.getVariable("requestId").toString());
		facilityApproverInfoData.put("approverUserId",
				kcontext.getVariable("committeeSecretary").toString());
		facilityApproverInfoData.put("approverRoleId", "Committee Secretary");
		facilityApproverInfoData.put("facilityId", "");
		facilityApproverInfoData.put("committeeId",
				kcontext.getVariable("committeeId").toString());
		facilityApproverList.add(facilityApproverInfoData);
		requestMap.put("facilityApproverInfo", facilityApproverList);
		System.out.println(requestMap.toString());
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());

	}

	public static void getFacilityApproverInfoOfRequest(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject facilityApproversObj = new org.json.JSONObject(
					kcontext.getVariable("facilityApproverResponse").toString());
			System.out.println("facilityApproversObj: "
					+ facilityApproversObj.toString());
			if (facilityApproversObj.has("facilityApproverInfo")) {
				org.json.JSONArray approversArr = facilityApproversObj
						.getJSONArray("facilityApproverInfo");
				System.out.println("FacilityApproverList: "
						+ approversArr.toString());
				java.util.ArrayList<String> listOfCommittee = new java.util.ArrayList<String>();
				for (int i = 0; i < approversArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							approversArr.get(i).toString());
					if (currentObj.has("committeeId")
							&& currentObj.get("committeeId") != null) {
						if (!listOfCommittee.contains(currentObj.get(
								"committeeId").toString())) {
							listOfCommittee.add(currentObj.get("committeeId")
									.toString());
						}
					}
				}
				kcontext.setVariable("committeeList", listOfCommittee);
				System.out.println("CommitteeList: "
						+ kcontext.getVariable("committeeList").toString());
				if (listOfCommittee.size() > 1) {
					kcontext.setVariable("hasMultipleCommittees", true);
				} else {
					kcontext.setVariable("hasMultipleCommittees", false);
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void generateAddRemovePartyMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray partiesArr = responseObj
					.getJSONArray("relatedParties");
			System.out.println(partiesArr.toString());
			java.util.HashMap<String, String> addedPartiesMap = new java.util.HashMap<>();
			java.util.HashMap<String, String> releasedPartiesMap = new java.util.HashMap<>();
			for (int i = 0; i < partiesArr.length(); i++) {
				org.json.JSONObject indObj = (org.json.JSONObject) partiesArr
						.get(i);
				if (indObj.has("amendRequestTypeStatus")
						&& indObj.get("amendRequestTypeStatus").equals("04")) {
					if (indObj.get("amendRequestType").equals("01")) {
						addedPartiesMap.put(indObj.get("relatedPartyId")
								.toString()
								+ ","
								+ indObj.get("rowId").toString(),
								indObj.get("facilityId").toString());
					} else if (indObj.get("amendRequestType").equals("02")) {
						releasedPartiesMap.put(indObj.get("relatedPartyId")
								.toString()
								+ ","
								+ indObj.get("rowId").toString(),
								indObj.get("facilityId").toString());

					}
				}
			}
			kcontext.setVariable("AddedPartiesMap", addedPartiesMap);
			kcontext.setVariable("ReleasedPartiesMap", releasedPartiesMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void getDecisionForPartyModification(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			boolean isFinalDecisionAvailable = false;
			String borrowerId = "";
			java.util.HashMap<String, String> partyDecisionMap = new java.util.HashMap<>();
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if (decisionObj.has("partyId")
								&& decisionObj.has("finalDecision")
								&& decisionObj.get("finalDecision").toString()
										.equals("true")) {
							isFinalDecisionAvailable = true;
							borrowerId = decisionObj.get("partyId").toString();
							break;
						}
					}
					if (isFinalDecisionAvailable) {
						for (int i = 0; i < decisionArray.length(); i++) {
							org.json.JSONObject decisionObj = new org.json.JSONObject(
									decisionArray.get(i).toString());
							if (decisionObj.has("finalDecision")
									&& decisionObj.get("finalDecision")
											.toString().equals("false")
									&& decisionObj.has("partyId")
									&& decisionObj.get("partyId").toString() != null
									&& !decisionObj.get("partyId").equals("")
									&& !decisionObj.get("partyId").toString()
											.equals(borrowerId)) {
								partyDecisionMap.put(decisionObj.get("partyId")
										.toString(),
										decisionObj.get("decisionId")
												.toString());
							}
						}
					}
				}
			}
			kcontext.setVariable("PartyDecisionMap", partyDecisionMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void getDecisionForCollateralModification(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			java.util.HashMap<String, String> collateralDecisionMap = new java.util.HashMap<>();
			boolean isFinalDecisionAvailable = false;
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if (decisionObj.has("collateralId")
								&& decisionObj.has("finalDecision")
								&& decisionObj.get("finalDecision").toString()
										.equals("true")) {
							isFinalDecisionAvailable = true;
							break;
						}
					}

					if (isFinalDecisionAvailable) {
						for (int i = 0; i < decisionArray.length(); i++) {
							org.json.JSONObject decisionObj = new org.json.JSONObject(
									decisionArray.get(i).toString());
							if (decisionObj.has("finalDecision")
									&& decisionObj.get("finalDecision")
											.toString().equals("false")
									&& decisionObj.has("collateralId")
									&& decisionObj.get("collateralId")
											.toString() != null
									&& !decisionObj.get("collateralId").equals(
											"")) {
								collateralDecisionMap.put(
										decisionObj.get("collateralId")
												.toString(),
										decisionObj.get("decisionId")
												.toString());
							}
						}
					}
				}
			}
			kcontext.setVariable("CollateralDecisionMap", collateralDecisionMap);
			System.out.println("CollateralMap: " + collateralDecisionMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void generateAddAndReleaseCollateralList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			java.util.ArrayList<String> addCollList = new java.util.ArrayList<>();
			java.util.ArrayList<String> releaseCollList = new java.util.ArrayList<>();
			if (responseObj.has("collaterals")) {
				org.json.JSONArray collaterals = responseObj
						.getJSONArray("collaterals");
				System.out.println(collaterals.toString());
				for (int i = 0; i < collaterals.length(); i++) {
					org.json.JSONObject indObj = (org.json.JSONObject) collaterals
							.get(i);
					org.json.JSONArray relationship = indObj
							.getJSONArray("collateralRelationships");
					for (int j = 0; j < relationship.length(); j++) {
						org.json.JSONObject relObj = (org.json.JSONObject) relationship
								.get(j);
						if (relObj.has("amendRequestTypeStatus")
								&& relObj.get("amendRequestTypeStatus")
										.toString().equals("04")) {
							if (relObj.has("amendRequestType")
									&& relObj.get("amendRequestType")
											.toString().equals("01")) {
								addCollList.add(relObj.get("collateralId")
										.toString());
							} else if (relObj.has("amendRequestType")
									&& relObj.get("amendRequestType")
											.toString().equals("02")) {
								releaseCollList.add(relObj.get("collateralId")
										.toString());
							}
						}
					}
				}
			}

			kcontext.setVariable("addCollateralList", addCollList);
			kcontext.setVariable("releaseCollateralList", releaseCollList);
			System.out.println("add Listt: " + addCollList);
			System.out.println("Release Listtt: " + releaseCollList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void getAllCommitteesInfo(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject committeeMemberObj = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			System.out.println("CommitteeMemberObj: "
					+ committeeMemberObj.toString());
			if (committeeMemberObj.has("creditCommitteeInfo")) {
				org.json.JSONArray committeeDetailList = committeeMemberObj
						.getJSONArray("creditCommitteeInfo");
				System.out.println("CommitteeDetailLists: "
						+ committeeDetailList.toString());
				java.util.HashMap committeesHirarchyMap = new java.util.HashMap();
				java.util.HashMap committeesMembersMap = new java.util.HashMap();
				java.util.List<String> reqCommitees = (java.util.ArrayList<String>) kcontext
						.getVariable("committeeList");
				java.util.Set<String> set = new java.util.HashSet<String>(
						reqCommitees);
				for (int i = 0; i < committeeDetailList.length(); i++) {
					org.json.JSONObject currentCommitteeObj = new org.json.JSONObject(
							committeeDetailList.get(i).toString());
					if (currentCommitteeObj.has("committeeName")
							&& currentCommitteeObj.get("committeeName") != null
							&& set.contains(currentCommitteeObj.get(
									"committeeName").toString())) {
						committeesHirarchyMap
								.put(currentCommitteeObj.get("committeeName")
										.toString(),
										currentCommitteeObj.get("hierarchy")
												.toString());
						java.util.ArrayList membersNameList = new java.util.ArrayList();
						if (currentCommitteeObj.has("members")
								&& currentCommitteeObj.get("members") != null) {
							org.json.JSONArray memberNames = currentCommitteeObj
									.getJSONArray("members");
							for (int j = 0; j < memberNames.length(); j++) {
								org.json.JSONObject currentmemberObj = new org.json.JSONObject(
										memberNames.get(j).toString());
								membersNameList.add(currentmemberObj
										.get("memberId"));
							}
						}
						committeesMembersMap.put(
								currentCommitteeObj.get("committeeName")
										.toString(), membersNameList);
					}
				}
				kcontext.setVariable("committeeHirarchyMap",
						committeesHirarchyMap);
				System.out.println("committeesHirarchyMap: "
						+ kcontext.getVariable("committeeHirarchyMap")
								.toString());
				kcontext.setVariable("committeeMembersMap",
						committeesMembersMap);
				System.out.println("committee Member List Map: "
						+ kcontext.getVariable("committeeMembersMap")
								.toString());
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getCommitteeWithMaxHierarchy(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.HashMap committeeHirarchy = (java.util.HashMap) kcontext
					.getVariable("committeeHirarchyMap");
			java.util.ArrayList ListOfCommittees = (java.util.ArrayList) kcontext
					.getVariable("committeeList");
			Integer maxHirarchy = Integer.parseInt("0");
			for (int i = 0; i < ListOfCommittees.size(); i++) {
				String currentCommittee = ListOfCommittees.get(i).toString();
				if (committeeHirarchy.containsKey(currentCommittee)) {
					Integer hirarchy = Integer.parseInt(committeeHirarchy.get(
							currentCommittee).toString());
					if (hirarchy > maxHirarchy) {
						maxHirarchy = hirarchy;
						kcontext.setVariable("committeeWithMaxHirarchy",
								currentCommittee);
					}
				}
			}
			System.out.println("committeeWithMaxHirarchy: "
					+ kcontext.getVariable("committeeWithMaxHirarchy")
							.toString());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareFacilityApproverDeleteData(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject facilityApproversObj = new org.json.JSONObject(
					kcontext.getVariable("facilityApproverResponse").toString());
			System.out.println("facilityApproversObj: "
					+ kcontext.getVariable("facilityApproverResponse")
							.toString());
			java.util.ArrayList modifyCommitteesFacList = new java.util.ArrayList();
			java.util.ArrayList deleteCommitteesRowIdsList = new java.util.ArrayList();
			if (facilityApproversObj.has("facilityApproverInfo")) {
				org.json.JSONArray approversArr = facilityApproversObj
						.getJSONArray("facilityApproverInfo");
				System.out.println("ApproverList: " + approversArr.toString());
				for (int i = 0; i < approversArr.length(); i++) {
					org.json.JSONObject currentObj = new org.json.JSONObject(
							approversArr.get(i).toString());
					if (currentObj.has("committeeId")
							&& currentObj.get("committeeId") != null
							&& !currentObj
									.get("committeeId")
									.toString()
									.equals(kcontext.getVariable(
											"committeeWithMaxHirarchy")
											.toString())) {
						deleteCommitteesRowIdsList.add(currentObj.get("rowId")
								.toString());
						if (!modifyCommitteesFacList.contains(currentObj.get(
								"facilityId").toString())) {
							modifyCommitteesFacList.add(currentObj.get(
									"facilityId").toString());
						}
					}
				}
				kcontext.setVariable("modifyCommitteeFacList",
						modifyCommitteesFacList);
				System.out.println("Facility List of removed CommitteeData: "
						+ kcontext.getVariable("modifyCommitteeFacList")
								.toString());
				kcontext.setVariable("deleteCommitteeRowIdsList",
						deleteCommitteesRowIdsList);
				System.out.println("RowIds of removed CommitteeData: "
						+ kcontext.getVariable("deleteCommitteeRowIdsList")
								.toString());
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void addModifiedDataToFacilityApproverInfo(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.HashMap<String, java.util.ArrayList<String>> committeeMembersMapping = new java.util.HashMap<String, java.util.ArrayList<String>>();
		committeeMembersMapping = (java.util.HashMap<String, java.util.ArrayList<String>>) (kcontext
				.getVariable("committeeMembersMap"));
		java.util.ArrayList<String> membersList = new java.util.ArrayList<String>();
		java.util.ArrayList facilityApproverList = new java.util.ArrayList();
		if (committeeMembersMapping.containsKey(kcontext.getVariable(
				"committeeWithMaxHirarchy").toString())) {
			membersList = (java.util.ArrayList<String>) (committeeMembersMapping
					.get(kcontext.getVariable("committeeWithMaxHirarchy")
							.toString()));
		}
		java.util.ArrayList<String> modifyComFacilitiesList = new java.util.ArrayList<String>();
		modifyComFacilitiesList = (java.util.ArrayList<String>) kcontext
				.getVariable("modifyCommitteeFacList");
		for (int i = 0; i < modifyComFacilitiesList.size(); i++) {
			String currentFacilityId = modifyComFacilitiesList.get(i)
					.toString();
			for (int j = 0; j < membersList.size(); j++) {
				java.util.HashMap facilityApproverInfoData = new java.util.HashMap();
				facilityApproverInfoData.put("requestId",
						kcontext.getVariable("requestId").toString());
				facilityApproverInfoData.put("facilityId", currentFacilityId);
				facilityApproverInfoData.put("committeeId", kcontext
						.getVariable("committeeWithMaxHirarchy").toString());
				facilityApproverInfoData.put("approverUserId",
						membersList.get(j).toString());
				facilityApproverInfoData.put("approverRoleId",
						"Committee Member");
				facilityApproverList.add(facilityApproverInfoData);
			}
		}
		java.util.HashMap requestMap = new java.util.HashMap();
		requestMap.put("facilityApproverInfo", facilityApproverList);
		System.out.println("requestMap: " + requestMap.toString());
		kcontext.setVariable("payloadMap", requestMap);
		System.out.println("payloadMap: "
				+ kcontext.getVariable("payloadMap").toString());
	}

	public static void sendNotificationToRM(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("In RM Message");
		java.util.HashMap requestMap = new java.util.HashMap();
		requestMap.put("dealId", kcontext.getVariable("requestId").toString());
		requestMap.put("userId", kcontext.getVariable("relationshipManager")
				.toString());
		String approvalStatus = "";
		if (kcontext.getVariable("approvalStatusId").toString().equals("01")) {
			approvalStatus = "Approved";
		} else if (kcontext.getVariable("approvalStatusId").toString()
				.equals("02")) {
			approvalStatus = "Declined";
		}
		String message = "Final Credit Decision for Facility "
				+ kcontext.getVariable("facilityId").toString() + " is "
				+ approvalStatus;
		System.out.println("Message: " + message);
		requestMap.put("messageDescription", message);
		kcontext.setVariable("payloadMap", requestMap);
	}

	public static void verifyIndividualDecisionsForModifiedFac(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("in Modified Facility Method");
		boolean finalDecisionObj = false;
		String amendmentTypes = "";
		boolean increaseAmtAmendmentType = false;
		boolean maturityDateAmendmentType = false;
		String partyId = kcontext.getVariable("partyId").toString();
		java.util.ArrayList<String> partiesDecisionList = new java.util.ArrayList<String>();
		java.util.ArrayList<String> collateralDecisionList = new java.util.ArrayList<String>();
		String partyCount = kcontext.getVariable("partyCount").toString();
		String collateralCount = kcontext.getVariable("collateralCount")
				.toString();
		try {
			org.json.JSONObject decisionResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (decisionResp.has("decisions")) {
				org.json.JSONArray decisionArray = decisionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject decisionObj = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if ((!decisionObj.has("committeeId") || decisionObj
								.get("committeeId").toString().isEmpty())
								&& (decisionObj.get("approverUserId")
										.toString())
										.equals(kcontext.getVariable(
												"approverUser").toString())
								&& decisionObj.has("finalDecision")) {
							if ((decisionObj.get("decisionId").toString()
									.equals("02")
									|| decisionObj.get("decisionId").toString()
											.equals("03") || decisionObj
									.get("decisionId").toString().equals("10"))
									&& decisionObj.get("finalDecision")
											.toString().equals("true")) {
								finalDecisionObj = true;
								amendmentTypes = decisionObj.get(
										"amendmentType").toString();
								break;
							} else if ((decisionObj.get("decisionId")
									.toString().equals("01") || decisionObj
									.get("decisionId").toString().equals("04"))
									&& decisionObj.get("finalDecision")
											.toString().equals("false")) {
								kcontext.setVariable("result",
										"finalIndividualTask");
							}
						} else {
							kcontext.setVariable("result", "individualTask");
						}
					}
					if (finalDecisionObj) {
						String[] amendmentTypesArr = amendmentTypes.split(",");
						for (int index = 0; index < amendmentTypesArr.length; index++) {
							for (int decisionIndex = 0; decisionIndex < decisionArray
									.length(); decisionIndex++) {
								org.json.JSONObject indDecisionObj = new org.json.JSONObject(
										decisionArray.get(decisionIndex)
												.toString());
								if (indDecisionObj.has("finalDecision")
										&& !Boolean.parseBoolean(indDecisionObj
												.get("finalDecision")
												.toString())) {
									if (indDecisionObj.has("amendmentType")
											&& indDecisionObj
													.get("amendmentType")
													.toString()
													.equals(amendmentTypesArr[index])) {
										if (amendmentTypesArr[index]
												.equals("01")) {
											increaseAmtAmendmentType = true;
											break;
										} else if (amendmentTypesArr[index]
												.equals("02")) {
											maturityDateAmendmentType = true;
											break;
										} else if (amendmentTypesArr[index]
												.equals("03")
												&& indDecisionObj
														.has("partyId")
												&& !indDecisionObj
														.get("partyId")
														.toString()
														.equals(partyId)
												&& indDecisionObj
														.get("amendmentType")
														.toString()
														.equals("03")) {
											partiesDecisionList
													.add(indDecisionObj.get(
															"partyId")
															.toString());
										} else if (amendmentTypesArr[index]
												.equals("04")
												&& indDecisionObj
														.has("collateralId")
												&& !indDecisionObj
														.get("collateralId")
														.toString().equals("")
												&& indDecisionObj
														.get("amendmentType")
														.toString()
														.equals("04")) {
											collateralDecisionList
													.add(indDecisionObj.get(
															"collateralId")
															.toString());
										}
									} else {
										kcontext.setVariable("result",
												"individualTask");
									}
								} else {
									kcontext.setVariable("result",
											"individualTask");
								}
							}
						}
						Integer pCount = Integer.parseInt(partyCount);
						Integer cCount = Integer.parseInt(collateralCount);
						if (amendmentTypes.contains("01")
								&& amendmentTypes.contains("02")
								&& increaseAmtAmendmentType
								&& maturityDateAmendmentType) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& amendmentTypes.contains("02")
								&& increaseAmtAmendmentType
								&& maturityDateAmendmentType
								&& pCount == partiesDecisionList.size()
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& amendmentTypes.contains("02")
								&& increaseAmtAmendmentType
								&& maturityDateAmendmentType
								&& pCount == partiesDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& amendmentTypes.contains("02")
								&& increaseAmtAmendmentType
								&& maturityDateAmendmentType
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& increaseAmtAmendmentType
								&& pCount == partiesDecisionList.size()
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("02")
								&& maturityDateAmendmentType
								&& pCount == partiesDecisionList.size()
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (pCount == partiesDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (cCount == collateralDecisionList.size()
								&& pCount == partiesDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& increaseAmtAmendmentType) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("02")
								&& maturityDateAmendmentType) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& increaseAmtAmendmentType
								&& pCount == partiesDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("01")
								&& increaseAmtAmendmentType
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("02")
								&& maturityDateAmendmentType
								&& pCount == partiesDecisionList.size()) {
							kcontext.setVariable("result", "true");
						} else if (amendmentTypes.contains("02")
								&& maturityDateAmendmentType
								&& cCount == collateralDecisionList.size()) {
							kcontext.setVariable("result", "true");
						}
					}
				} else {
					kcontext.setVariable("result", "individualTask");
				}
			} else {
				kcontext.setVariable("result", "individualTask");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void prepareDataForPartyAndCollateralModifications(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.ArrayList<String> partyList = new java.util.ArrayList<>();
		java.util.ArrayList<String> collateralList = new java.util.ArrayList<>();

		try {
			System.out.println("response: "
					+ kcontext.getVariable("relatedPartiesResp").toString());
			org.json.JSONObject relatedPartiesObj = new org.json.JSONObject(
					kcontext.getVariable("relatedPartiesResp").toString());
			org.json.JSONArray partiesArr = relatedPartiesObj
					.getJSONArray("relatedParties");
			System.out.println(partiesArr.toString());
			for (int i = 0; i < partiesArr.length(); i++) {
				org.json.JSONObject indObj = (org.json.JSONObject) partiesArr
						.get(i);
				if (indObj.has("amendRequestTypeStatus")
						&& indObj.get("amendRequestTypeStatus").equals("04")) {
					partyList.add(indObj.get("facilityId").toString());
				}
			}

			System.out.println("response: "
					+ kcontext.getVariable("collateralsResp").toString());
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("collateralsResp").toString());
			if (responseObj.has("collaterals")) {
				org.json.JSONArray collaterals = responseObj
						.getJSONArray("collaterals");
				System.out.println(collaterals.toString());
				for (int i = 0; i < collaterals.length(); i++) {
					org.json.JSONObject indObj = (org.json.JSONObject) collaterals
							.get(i);
					org.json.JSONArray relationship = indObj
							.getJSONArray("collateralRelationshipResponse");
					for (int j = 0; j < relationship.length(); j++) {
						org.json.JSONObject relObj = (org.json.JSONObject) relationship
								.get(j);
						if (relObj.has("amendRequestTypeStatus")
								&& relObj.get("amendRequestTypeStatus")
										.toString().equals("04")) {
							collateralList.add(relObj.get("facilityId")
									.toString());
						}
					}
				}
			}
			System.out.println("Parties List************" + partyList);
			java.util.LinkedHashSet newPartiesList = new java.util.LinkedHashSet<>();
			newPartiesList.addAll(partyList);
			partyList.clear();
			partyList.addAll(newPartiesList);
			System.out.println("Parties List without duplicates************"
					+ partyList);
			System.out.println("Collaterals List************" + collateralList);
			java.util.LinkedHashSet newCollateralsList = new java.util.LinkedHashSet<>();
			newCollateralsList.addAll(collateralList);
			collateralList.clear();
			collateralList.addAll(newCollateralsList);
			System.out
					.println("Collaterals List without duplicates************"
							+ collateralList);
			kcontext.setVariable("partyModifiedFacilityList", partyList);
			kcontext.setVariable("collateralModifiedFacilityList",
					collateralList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
}