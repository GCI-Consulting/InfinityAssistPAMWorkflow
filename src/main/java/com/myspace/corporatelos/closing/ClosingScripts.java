package com.myspace.corporatelos.closing;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class ClosingScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public ClosingScripts() {
	}

	public static void checkConditions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject conditionResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (conditionResp.has("decisions")) {
				org.json.JSONArray decisionArray = conditionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject conditionObject = new org.json.JSONObject(
								decisionArray.get(i).toString());
						org.json.JSONArray conditionArray = conditionObject
								.getJSONArray("conditions");
						if (conditionArray.length() > 0) {
							for (int j = 0; j < conditionArray.length(); j++) {
								org.json.JSONObject indEle = new org.json.JSONObject(
										conditionArray.get(j).toString());
								if (!indEle.isNull("conditionStatus")
										&& (!indEle.get("conditionStatus")
												.equals("01"))) {
									kcontext.setVariable("result", true);
									break;
								} else {
									kcontext.setVariable("result", false);
								}

							}
						} else {
							kcontext.setVariable("result", true);
						}
					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkMonitorCompliance(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject complianceResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (complianceResp.has("compliances")) {
				org.json.JSONArray compArray = complianceResp
						.getJSONArray("compliances");
				if (compArray.length() > 0) {
					for (int i = 0; i < compArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								compArray.get(i).toString());
						if (!indEle.isNull("status")
								&& (indEle.get("status").equals("01") || indEle
										.get("status").equals("02"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkFunding(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			if (kcontext.getVariable("facilityTypeVal").toString()
					.equals("LETTER.OF.CREDIT")
					|| kcontext.getVariable("facilityTypeVal").toString()
							.equals("LETTER.OF.GUARANTEE")) {
				kcontext.setVariable("result", "Approved");
			} else {
				org.json.JSONObject responseObj = new org.json.JSONObject(
						kcontext.getVariable("response").toString());
				org.json.JSONArray fundingArray = responseObj
						.getJSONArray("funding");
				if (fundingArray.length() > 0) {
					int val = 1;
					for (int i = 0; i < fundingArray.length(); i++) {
						org.json.JSONObject fundingObj = new org.json.JSONObject(
								fundingArray.get(i).toString());
						if (!fundingObj.get("fundingAcctStatus").equals("01")) {
							val = 0;
							kcontext.setVariable("result", "Rejected");
							break;
						}
					}
					if (val == 1) {
						kcontext.setVariable("result", "Approved");
					}
				} else {
					kcontext.setVariable("result", "Rejected");
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void fundingBasedOnFacility(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray fundingArray = responseObj
					.getJSONArray("funding");
			if ((kcontext.getVariable("facilityTypeVal").toString()
					.equals("REVOLVING.FACILITY")
					|| kcontext.getVariable("facilityTypeVal").toString()
							.equals("LINE.OF.CREDIT.NON.REVOLVING") || kcontext
					.getVariable("facilityTypeVal").toString()
					.equals("OVERDRAFT"))
					&& fundingArray.length() == 0) {
				kcontext.setVariable("result", "Approved");
			} else {
				kcontext.setVariable("result", "Rejected");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getProductName(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject productObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (productObj.has("productGroups")) {
				org.json.JSONArray productsGroupsArr = productObj
						.getJSONArray("productGroups");
				System.out.println("ProductGroupArray: "
						+ productsGroupsArr.toString());
				org.json.JSONObject currentProductGroupsObj = new org.json.JSONObject(
						productsGroupsArr.get(0).toString());
				if (currentProductGroupsObj.has("products")) {
					org.json.JSONArray productsArr = currentProductGroupsObj
							.getJSONArray("products");
					for (int j = 0; j < productsArr.length(); j++) {
						org.json.JSONObject currentProductObj = new org.json.JSONObject(
								productsArr.get(j).toString());
						if (currentProductObj
								.get("productRef")
								.toString()
								.equals(kcontext.getVariable("facilityType")
										.toString())) {
							kcontext.setVariable("facilityTypeVal",
									currentProductObj.get("productRef")
											.toString());

							break;
						}
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void checkSignedDocument(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject documentResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray docArray = documentResp
					.getJSONArray("documents");
			boolean modifiedFlag = false;
			if (kcontext.getVariable("isModifiedFacility") != null) {
				modifiedFlag = Boolean.parseBoolean(kcontext.getVariable(
						"isModifiedFacility").toString());
			}
			if (modifiedFlag == true) {
				if (docArray.length() > 0) {
					for (int i = 0; i < docArray.length(); i++) {

						org.json.JSONObject indEle = new org.json.JSONObject(
								docArray.get(i).toString());
						if (!indEle.isNull("documentStatus")
								&& !indEle.isNull("documentType")
								&& !indEle.isNull("documentCategory")
								&& (indEle.get("documentStatus").equals("05"))
								&& (indEle.get("documentType")
										.equals("mdfcn_agrmnt"))
								&& (indEle.get("documentCategory")
										.equals("agrmnt_doc"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				if (docArray.length() > 0) {
					int signedDocsCount = 0;
					boolean isOtherThanTermSheet = false;
					boolean isTermSheet = false;
					kcontext.setVariable("result", false);
					for (int i = 0; i < docArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								docArray.get(i).toString());
						if (!indEle.isNull("documentStatus")
								&& indEle.get("documentStatus").equals("05")) {
							signedDocsCount = signedDocsCount + 1;
						}
						if (!indEle.isNull("documentType")
								&& !indEle.get("documentType").equals("trm_sht") &&!indEle.isNull("documentStatus")
								&& indEle.get("documentStatus").equals("05")) {
							isOtherThanTermSheet = true;
						}
						if (!indEle.isNull("documentType")
								&& indEle.get("documentType").equals("trm_sht") && !indEle.isNull("documentStatus")
								&& indEle.get("documentStatus").equals("05")) {
							isTermSheet = true;
						}
					}
					if (signedDocsCount >= 2 && isOtherThanTermSheet && isTermSheet) {
						kcontext.setVariable("result", true);
					} else {
						kcontext.setVariable("result", false);
					}
				} else {
					kcontext.setVariable("result", false);
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void checkApprovedDocument(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject documentResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray docArray = documentResp
					.getJSONArray("documents");
			boolean modifiedFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isModifiedFacility").toString());
			if (modifiedFlag == true) {
				if (docArray.length() > 0) {
					for (int i = 0; i < docArray.length(); i++) {

						org.json.JSONObject indEle = new org.json.JSONObject(
								docArray.get(i).toString());
						if (!indEle.isNull("documentStatus")
								&& !indEle.isNull("documentType")
								&& !indEle.isNull("documentCategory")
								&& (indEle.get("documentStatus").equals("01"))
								&& (indEle.get("documentType")
										.equals("mdfcn_agrmnt"))
								&& (indEle.get("documentCategory")
										.equals("agrmnt_doc"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				if (docArray.length() > 0) {
					for (int i = 0; i < docArray.length(); i++) {

						org.json.JSONObject indEle = new org.json.JSONObject(
								docArray.get(i).toString());
						if (!indEle.isNull("documentStatus")
								&& !indEle.isNull("documentType")
								&& !indEle.isNull("documentCategory")
								&& (indEle.get("documentStatus").equals("01"))
								&& (indEle.get("documentType")
										.equals("trm_sht"))
								&& (indEle.get("documentCategory")
										.equals("agrmnt_doc"))) {
							kcontext.setVariable("result", true);
							break;
						} else {
							kcontext.setVariable("result", false);
						}

					}
				} else {
					kcontext.setVariable("result", false);
				}

			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getChangedAmount(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			java.math.BigDecimal amount = new java.math.BigDecimal("0");
			if (responseObj.has("feesItems")) {
				org.json.JSONArray feesItemsArr = responseObj
						.getJSONArray("feesItems");
				if (feesItemsArr.length() > 0) {

					for (int j = 0; j < feesItemsArr.length(); j++) {
						org.json.JSONObject currentFeeObj = new org.json.JSONObject(
								feesItemsArr.get(j).toString());
						if (currentFeeObj.get("feeType").toString()
								.equals("03")) {
							if (currentFeeObj.has("amount")) {
								amount = amount
										.add(new java.math.BigDecimal(
												currentFeeObj.get("amount")
														.toString()));
							} else {
								System.out
										.println("No amount is present for the fee");
							}
						}
					}
				}
			} else {
				System.out.println("No feeItems are present");
			}
			kcontext.setVariable("upfrontChargeAmount", amount.toString());

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getDrawRestriction(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray drawArr = responseObj
					.getJSONArray("drawRestrictions");
			java.util.ArrayList finalList = new java.util.ArrayList();
			System.out.println(drawArr.toString());
			java.util.ArrayList restrictionList = new java.util.ArrayList<>();
			for (int i = 0; i < drawArr.length(); i++) {

				java.util.HashMap finalObj = new java.util.HashMap();
				org.json.JSONObject indObj = (org.json.JSONObject) drawArr
						.get(i);
				if (indObj.has("restrictionType")
						&& indObj.get("restrictionType").toString() != null
						&& !indObj.get("restrictionType").equals("")
						&& indObj.get("restrictionType").equals("06")) {
					if (indObj.has("startDate")
							&& indObj.has("restrictionValue")
							&& indObj.get("startDate").toString() != null
							&& indObj.get("restrictionValue").toString() != null) {
						if (indObj.get("startDate").toString().equals("-")) {
							java.util.Date date = new java.util.Date();
							java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
									"yyyy-MM-dd");
							String currDate = sdf.format(date).toString();
							finalObj.put("commitmentStartDate", currDate);
							finalObj.put("commitmentAmount",
									indObj.get("restrictionValue").toString());
							finalList.add(finalObj);

						} else {
							String sDate = indObj.get("startDate").toString();
							java.text.SimpleDateFormat formatter = new java.text.SimpleDateFormat(
									"yyyy-MM-dd");
							java.util.Date date = formatter.parse(sDate);
							System.out.println("Date" + formatter.format(date));
							finalObj.put("commitmentStartDate",
									formatter.format(date));
							finalObj.put("commitmentAmount",
									indObj.get("restrictionValue").toString());
							finalList.add(finalObj);

						}
					}

				}

			}
			java.util.Collections.sort(finalList,
					new java.util.Comparator<java.util.Map<String, Object>>() {
						public int compare(
								java.util.Map<String, Object> restriction1,
								java.util.Map<String, Object> restriction2) {
							if (restriction1.get("commitmentStartDate") != null
									&& restriction2.get("commitmentStartDate") != null)
								return (restriction1.get("commitmentStartDate")
										.toString()).compareTo(restriction2
										.get("commitmentStartDate").toString());
							else
								return 0;
						}
					});

			kcontext.setVariable("restrictionFinalList", finalList);

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void prepareProcessesList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			boolean modifiedFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isModifiedFacility").toString());
			boolean newFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isNewFacility").toString());
			boolean fundingFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isFacilityAmount").toString());
			java.util.ArrayList procList = new java.util.ArrayList();
			if (newFlag) {
				procList.add("CorporateLOS.Conditions");
				procList.add("CorporateLOS.MonitorCompliance");
				procList.add("CorporateLOS.SettlementReviewandBoardingApproval");
				procList.add("CorporateLOS.Boarding");
				procList.add("CorporateLOS.FundingInstructions");
			}
			if (modifiedFlag) {
				procList.add("CorporateLOS.SettlementReviewandBoardingApproval");
				procList.add("CorporateLOS.Boarding");

				if (fundingFlag) {
					procList.add("CorporateLOS.FundingInstructions");
				}
			}
			java.util.LinkedHashSet uniqueProcessesList = new java.util.LinkedHashSet<>();
			uniqueProcessesList.addAll(procList);
			procList.clear();
			procList.addAll(uniqueProcessesList);
			kcontext.setVariable("processesList", procList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkDealConditions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			boolean resultFlag = true;
			org.json.JSONObject conditionResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (conditionResp.has("decisions")) {
				org.json.JSONArray decisionArray = conditionResp
						.getJSONArray("decisions");
				if (decisionArray.length() > 0) {
					for (int i = 0; i < decisionArray.length(); i++) {
						org.json.JSONObject conditionObject = new org.json.JSONObject(
								decisionArray.get(i).toString());
						if (conditionObject.get("facilityId") == null
								|| conditionObject.get("facilityId").toString()
										.equals("")) {
							org.json.JSONArray conditionArray = conditionObject
									.getJSONArray("conditions");
							if (conditionArray.length() > 0) {
								for (int j = 0; j < conditionArray.length(); j++) {
									org.json.JSONObject indEle = new org.json.JSONObject(
											conditionArray.get(j).toString());
									if (!indEle.isNull("conditionStatus")
											&& (indEle.get("conditionStatus")
													.equals("01"))) {
										resultFlag = false;
										break;
									}
								}
							}
						}
						if (!resultFlag) {
							break;
						}
					}
				}
			}
			if (resultFlag) {
				kcontext.setVariable("result", true);
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkDealMonitorCompliance(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject complianceResp = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			if (complianceResp.has("compliances")) {
				org.json.JSONArray compArray = complianceResp
						.getJSONArray("compliances");
				if (compArray.length() > 0) {
					for (int i = 0; i < compArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								compArray.get(i).toString());
						if ((indEle.get("facilityId") == null
								&& indEle.get("partyId") == null && indEle
								.get("collateralId") == null)
								|| (indEle.get("facilityId").toString()
										.equals(""))) {
							if (!indEle.isNull("status")
									&& (indEle.get("status").equals("01") || indEle
											.get("status").equals("02"))) {
								kcontext.setVariable("result", true);
							} else {
								kcontext.setVariable("result", false);
								break;
							}
						} else {
							kcontext.setVariable("result", false);
						}
					}
				} else {
					kcontext.setVariable("result", true);
				}
			} else {
				kcontext.setVariable("result", true);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkDealApprovedDocument(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject documentResp = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray docArray = documentResp
					.getJSONArray("documents");

			if (docArray.length() > 0) {
				for (int i = 0; i < docArray.length(); i++) {

					org.json.JSONObject indEle = new org.json.JSONObject(
							docArray.get(i).toString());
					if (!indEle.isNull("documentStatus")
							&& !indEle.isNull("documentType")
							&& !indEle.isNull("documentCategory")
							&& (indEle.get("documentStatus").equals("01"))
							&& (indEle.get("documentType")
									.equals("deal_trm_sht"))
							&& (indEle.get("documentCategory")
									.equals("deal_agrmnt_doc"))) {
						kcontext.setVariable("result", true);
						break;
					} else {
						kcontext.setVariable("result", false);
					}

				}
			} else {
				kcontext.setVariable("result", false);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	
	public static void getDealTerm(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());

			Integer year = 0;
			Integer month = 0;
			Integer days = 0;
			if (!responseObj.isNull("year")
					&& !responseObj.get("year").equals("")) {
				year = Integer.parseInt(responseObj.get("year").toString());
			}
			if (!responseObj.isNull("month")
					&& !responseObj.get("month").equals("")) {
				month = Integer.parseInt(responseObj.get("month").toString());
			}
			if (!responseObj.isNull("days")
					&& !responseObj.get("days").equals("")) {
				days = Integer.parseInt(responseObj.get("days").toString());
			}
			Integer noOfDays = year * 365 + month * 30 + days;
			System.out.println(noOfDays);
			Integer globalTerm = Integer.parseInt(kcontext.getVariable("term")
					.toString());
			if (noOfDays > globalTerm) {
				String facilityTerm = noOfDays.toString() + "D";
				System.out.println("Str: " + facilityTerm);
				globalTerm = noOfDays;
				kcontext.setVariable("dealTerm", facilityTerm);
				kcontext.setVariable("term", globalTerm);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareDealFullfillmentMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			java.util.HashMap requestMap = new java.util.HashMap();
			requestMap.put("amount", kcontext.getVariable("amount").toString());
			requestMap.put("upfrontChargeAmount",
					kcontext.getVariable("upfrontChargeAmount").toString());
			requestMap.put("term", kcontext.getVariable("dealTerm").toString());
			requestMap.put("productId", kcontext.getVariable("productId")
					.toString());
			requestMap.put("currency", kcontext.getVariable("currencyId")
					.toString());
			requestMap.put("effectiveDate", "");
			java.util.ArrayList<java.util.HashMap<String, String>> list = (java.util.ArrayList<java.util.HashMap<String, String>>) kcontext
					.getVariable("customerList");
			com.google.gson.JsonArray cusList = new com.google.gson.JsonArray();
			for (int i = 0; i < list.size(); i++) {
				java.util.HashMap<String, String> Obj = (java.util.HashMap<String, String>) list
						.get(i);
				com.google.gson.JsonObject objToPush = new com.google.gson.JsonObject();
				for (java.util.Map.Entry entry : Obj.entrySet()) {
					objToPush.addProperty(entry.getKey().toString(), entry
							.getValue().toString());
				}
				cusList.add(objToPush);
			}
			System.out.println("CustomerLIST*************" + cusList);
			requestMap.put("customers", cusList);
			if (kcontext.getVariable("payInAccount") != null) {
				requestMap.put("payInAccount",
						kcontext.getVariable("payInAccount").toString());
			}
			kcontext.setVariable("payloadMap", requestMap);
			System.out.println("requestMap: " + requestMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

}