package com.myspace.corporatelos.submitted;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class SubmittedScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public SubmittedScripts() {
	}

	public static void checkPricingRecords(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray pricingArray = responseObj
					.getJSONArray("pricing");
			if (pricingArray.length() > 0)
				kcontext.setVariable("result", "Approved");
			else
				kcontext.setVariable("result", "Rejected");
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void prepareProcessesList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.ArrayList procList = new java.util.ArrayList();
			boolean modifiedFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isModifiedFacility").toString());
			boolean newFlag = Boolean.parseBoolean(kcontext.getVariable(
					"isNewFacility").toString());
			if (modifiedFlag) {
				procList.add("InfinityAssist.AddNarrativeModification");
			}
			if (newFlag) {
				procList.add("CorporateLOS.RequestedStructure");
				procList.add("CorporateLOS.Narratives");
			}
			kcontext.setVariable("processesList", procList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkNarratives(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray narrativesArray = responseObj
					.getJSONArray("narratives");
			if (narrativesArray.length() > 0) {
				for (int i = 0; i < narrativesArray.length(); i++) {
					org.json.JSONObject indNarrative = new org.json.JSONObject(
							narrativesArray.get(i).toString());
					if (indNarrative.get("categoryId").equals("01")) {
						kcontext.setVariable("result", "Approved");
						break;
					} else {
						kcontext.setVariable("result", "Rejected");
					}
				}
			} else {
				kcontext.setVariable("result", "Rejected");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getProductName(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("response: "
					+ kcontext.getVariable("response").toString());
			org.json.JSONObject productObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (productObj.has("productGroups")) {
				org.json.JSONArray productsGroupsArr = productObj
						.getJSONArray("productGroups");
				System.out.println("ProductGroupArray: "
						+ productsGroupsArr.toString());
				org.json.JSONObject currentProductGroupsObj = new org.json.JSONObject(
						productsGroupsArr.get(0).toString());
				if (currentProductGroupsObj.has("products")) {
					org.json.JSONArray productsArr = currentProductGroupsObj
							.getJSONArray("products");
					org.json.JSONArray responseFacility = new org.json.JSONArray(
							kcontext.getVariable("facilitiesList").toString());
					org.json.JSONArray responseFacilityType = new org.json.JSONArray(
							kcontext.getVariable("facilitiesTypeList")
									.toString());
					java.util.ArrayList newFacilityList = new java.util.ArrayList();
					for (int k = 0; k < responseFacility.length(); k++) {
						for (int j = 0; j < productsArr.length(); j++) {
							org.json.JSONObject currentProductObj = new org.json.JSONObject(
									productsArr.get(j).toString());
							if (currentProductObj.get("productRef").toString()
									.equals(responseFacilityType.get(k))
									&& !currentProductObj.get("productRef")
											.toString()
											.equals("LETTER.OF.CREDIT")
									&& !currentProductObj.get("productRef")
											.toString()
											.equals("LETTER.OF.GUARANTEE")) {
								newFacilityList.add(responseFacility.get(k));
								break;
							}
						}
						kcontext.setVariable("facilitiesIdList",
								newFacilityList);
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkModifiedNarratives(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		System.out.println("response: "
				+ kcontext.getVariable("response").toString());
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray narrativesArray = responseObj
					.getJSONArray("narratives");
			java.util.ArrayList<String> modifiedFacList = new java.util.ArrayList<>();
			modifiedFacList = (java.util.ArrayList) kcontext
					.getVariable("modifiedFacilityList");
			Integer counter = 0;
			if (narrativesArray.length() > 0) {
				for (int i = 0; i < narrativesArray.length(); i++) {
					org.json.JSONObject indNarrative = new org.json.JSONObject(
							narrativesArray.get(i).toString());
					if (indNarrative.get("categoryId").equals("12")) {
						counter = counter + 1;

					}
				}
				if (counter == modifiedFacList.size()) {
					kcontext.setVariable("result", "Approved");
				} else {
					kcontext.setVariable("result", "Rejected");
				}

			} else {
				kcontext.setVariable("result", "Rejected");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
}