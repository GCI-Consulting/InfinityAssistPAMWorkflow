package com.temenos.infinityassist;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class InfinityAssistScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public InfinityAssistScripts() {
	}

	public static void setErrorVariables(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		kcontext.setVariable("application", "Corporate");
		java.util.Map<String, Object> requestMap = new java.util.HashMap<String, Object>();
		if (kcontext.getVariable("AdditionalParameters") != null) {
			requestMap = (java.util.Map<String, Object>) kcontext
					.getVariable("AdditionalParameters");
		}
		// Request ID
		if (kcontext.getVariable("RequestId") != null) {
			kcontext.setVariable("requestId", kcontext.getVariable("RequestId")
					.toString());
		} else if (requestMap.get("requestId") != null) {
			kcontext.setVariable("requestId", requestMap.get("requestId")
					.toString());
		}

		// Facility ID
		if (kcontext.getVariable("FacilityId") != null) {
			kcontext.setVariable("facilityId",
					kcontext.getVariable("FacilityId").toString());
		} else if (requestMap.get("facilityId") != null) {
			kcontext.setVariable("facilityId", requestMap.get("facilityId")
					.toString());
		}

		// Party ID
		if (kcontext.getVariable("PartyId") != null) {
			kcontext.setVariable("partyId", kcontext.getVariable("PartyId")
					.toString());
		} else if (requestMap.get("partyId") != null) {
			kcontext.setVariable("partyId", requestMap.get("partyId")
					.toString());
		}
	}

	public static void setDocumentListForReference(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String docResponse = (String) kcontext
					.getVariable("requestResponse");
			String partyId = (String) kcontext.getVariable("partyId");
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					docResponse);
			org.json.JSONArray documentArray = new org.json.JSONArray(
					responseJSON.getString("documentsList"));
			java.util.List<java.util.HashMap<String, Object>> documentList = new java.util.ArrayList<java.util.HashMap<String, Object>>();
			for (int i = 0; i < documentArray.length(); i++) {
				org.json.JSONObject documentObj = new org.json.JSONObject(
						documentArray.get(i).toString());
				java.util.HashMap<String, Object> documentData = new java.util.HashMap<String, Object>();
				// documentData.put("fileInfo", documentObj.opt("fileInfo"));
				documentData.put("documentId", documentObj.get("documentId"));
				documentData.put("documentType",
						documentObj.opt("documentType"));
				documentData.put("documentStatus",
						documentObj.opt("documentStatus"));
				documentData.put("metaDocumentName",
						documentObj.opt("metaDocumentName"));
				documentData.put("category", documentObj.opt("category"));
				documentData.put("referenceId", partyId);
				documentData.put("isSystemGenerated",
						documentObj.opt("isSystemGenerated"));
				documentList.add(documentData);
			}
			kcontext.setVariable("documentsList", documentList);
		} catch (Exception e) {
		}
	}

	public static void setRequestDetailsforCopyOperation(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = kcontext.getVariable("response").toString();
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("documentList",
					responseJSON.optJSONArray("documentsList").toString());
			kcontext.setVariable("partyId", responseJSON.optString("partyId")
					.toString());
			kcontext.setVariable("lineOfBusiness",
					responseJSON.optString("lineOfBusiness").toString());
			kcontext.setVariable("externalServicesHistoryList", responseJSON
					.optString("externalServicesHistoryList").toString());
			kcontext.setVariable("bankAccounts", responseJSON.optString("bankAccounts").toString());

			java.util.Map<String, String> submitDealRequest = new java.util.HashMap<String, String>();
			submitDealRequest.put("relationshipManager", responseJSON
					.optString("relationshipManager").toString());
			submitDealRequest.put("relatedPartiesList",
					responseJSON.optString("relatedPartiesList").toString());
			submitDealRequest.put("requestName",
					responseJSON.optString("requestName").toString());
			submitDealRequest.put("requestStatus",
					responseJSON.optString("requestStatus").toString());
			submitDealRequest.put("facilityList",
					responseJSON.optString("facilityList").toString());
			submitDealRequest.put("documentList",
					responseJSON.optString("documentsList").toString());
			submitDealRequest.put("amount", responseJSON.optString("amount")
					.toString());
			submitDealRequest.put("currencyId",
					responseJSON.optString("currencyId").toString());
			submitDealRequest.put("groupId", responseJSON.optString("groupId")
					.toString());
			submitDealRequest.put("sourceOfApplication", "01");
			submitDealRequest.put("usageId", responseJSON.optString("usageId")
					.toString());
			submitDealRequest.put("lineOfBusiness",
					responseJSON.optString("lineOfBusiness").toString());
			submitDealRequest.put("externalReferenceId", responseJSON
					.optString("externalReferenceId").toString());
			submitDealRequest.put("ouId", responseJSON.optString("ouId")
					.toString());
			kcontext.setVariable("submitDealRequest", submitDealRequest);
			java.util.Map<String, String> pricingRequest = new java.util.HashMap<String, String>();
			if(responseJSON.optString("productLineRef").toString().equalsIgnoreCase("FACILITY")){
				// mortgage pricing requestMap
				pricingRequest.put("FixedMinMarginRate", responseJSON.optString("FixedMinMarginRate"));
				pricingRequest.put("FixedMaxMarginRate", responseJSON.optString("FixedMaxMarginRate"));
				pricingRequest.put("FixedMarginRate",responseJSON.optString("FixedMarginRate"));
				pricingRequest.put("FixedMarginType",responseJSON.optString("FixedMarginType"));
				pricingRequest.put("FixedBaseRate",responseJSON.optString("FixedBaseRate"));
				pricingRequest.put("PeriodicMinMarginRate", responseJSON.optString("PeriodicMinMarginRate"));
				pricingRequest.put("PeriodicMaxMarginRate", responseJSON.optString("PeriodicMaxMarginRate"));
				pricingRequest.put("PeriodicMarginRate", responseJSON.optString("PeriodicMarginRate"));
				pricingRequest.put("PeriodicMarginType", responseJSON.optString("PeriodicMarginType"));
				pricingRequest.put("PeriodicBaseRate",responseJSON.optString("PeriodicBaseRate"));
			}else{
				pricingRequest.put("pricingType",
					responseJSON.optString("pricingType").toString());
			    pricingRequest.put("paymentFrequency",
					responseJSON.optString("paymentFrequency").toString());
			    pricingRequest.put("borrowerRate",
					responseJSON.optString("borrowerRate").toString());
			    pricingRequest.put("indicativeBorrowerRate",
					responseJSON.optString("indicativeBorrowerRate").toString()
							.replace("%", ""));
			    pricingRequest.put("months", responseJSON.optString("months")
					.toString());
			    pricingRequest.put("aprRate", responseJSON.optString("aprRate")
					.toString());
			    pricingRequest.put("status", responseJSON.optString("status")
					.toString());
			}
			
			kcontext.setVariable("pricingRequest", pricingRequest);
			
			java.util.Map<String, String> financialRequest = new java.util.HashMap<String, String>();
			financialRequest.put("year", responseJSON.optString("year")
					.toString());
			financialRequest.put("month", responseJSON.optString("month")
					.toString());
			financialRequest.put("dateAdded",
					responseJSON.optString("dateAdded").toString());
			financialRequest.put("debtToIncomeRatio",
					responseJSON.optString("debtToIncomeRatio").toString());
			kcontext.setVariable("financialRequest", financialRequest);
			kcontext.setVariable("currencyId",
					responseJSON.optString("currencyId").toString());
			kcontext.setVariable("productGroupRef",
					responseJSON.optString("productGroupRef").toString());
			if (responseJSON.optString("simulations") != null) {
				org.json.JSONArray simulations_str = new org.json.JSONArray(
						responseJSON.optString("simulations").toString());
				java.util.List<Object> _simulations = new java.util.ArrayList<Object>();
				for (int i = 0; i < simulations_str.length(); i++) {
					_simulations.add(simulations_str.getJSONObject(i)
							.toString());
				}
				kcontext.setVariable("simulations", _simulations);
					if (responseJSON.optString("additionalQuestionsList") != null) {
					kcontext.setVariable("additionalQuestionsList",
							responseJSON.optString("additionalQuestionsList"));
				}
			}
		} catch (Exception e) {

		}
	}
	public static void validateFunding(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getFundingRespMap) {
		try {
			org.json.JSONObject FundingResponseJSON = new org.json.JSONObject(
					getFundingRespMap);
			if (FundingResponseJSON.has("funding")) {
				org.json.JSONArray FundingArray = FundingResponseJSON
						.getJSONArray("funding");
				if (FundingArray.length() != 0) {
					for (int i = 0; i < FundingArray.length(); i++) {
						org.json.JSONObject FundingObj = FundingArray
								.getJSONObject(i);
						String fundingAcctStatus = FundingObj
								.optString("fundingAcctStatus");
						if (fundingAcctStatus.isEmpty()
								&& !fundingAcctStatus.equalsIgnoreCase("01")) {
							kcontext.setVariable("result", false);
							break;
							// If for one drawing funding is not Approved then
							// we will raise human task again
						} else if (fundingAcctStatus.equalsIgnoreCase("01")) {
							kcontext.setVariable("result", true);
							// break;
						}
					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void prepareProcessVariablesForFunding(
			org.kie.api.runtime.process.ProcessContext kcontext,
			java.util.Map signalResp) {
		try {
			org.json.JSONObject CustomerActionObj = new org.json.JSONObject(
					signalResp.get("Response").toString());
			String customerActionName = kcontext.getVariable(
					"customerActionName").toString();
			kcontext.setVariable("CustomerActionflag", false);
			java.util.Map<String, String> customerActionResponseMap;
            if (customerActionName.equalsIgnoreCase("DisbursementNotaryDetails")) {
				String notaryValue = CustomerActionObj.get("Notary").toString();
				kcontext.setVariable("isNotaryProvided", notaryValue);
				kcontext.setVariable("CustomerActionflag", true);
			}
			else if (customerActionName.equalsIgnoreCase("DisbursementDetails") && !(CustomerActionObj.length() == 0)) {
				customerActionResponseMap = new java.util.HashMap<String, String>();
				org.json.JSONArray customerActionArray = CustomerActionObj
						.getJSONArray("Disbursements");
				customerActionResponseMap.put("disbursementType",
						CustomerActionObj.optString("DisbursementType"));
				org.json.JSONObject customerAction = new org.json.JSONObject(
						customerActionArray.get(0).toString());
				customerActionResponseMap.put("totalAmount",
						customerAction.optString("DisbursementAmount"));
				customerActionResponseMap.put("disbursementDate",
						customerAction.optString("DisbursementDate"));
				customerActionResponseMap.put("currencyId", "USD");
				customerActionResponseMap.put("disbursementPercentage",
						(customerAction.optString("DisbursementPercentage"))
								.replaceAll("%", ""));
								
				kcontext.setVariable("payloadDisbursementMap",
						customerActionResponseMap);
				kcontext.setVariable("CustomerActionflag", true);

			} else if (customerActionName.equalsIgnoreCase("AccountDetails") && !(CustomerActionObj.length() == 0)) {
				customerActionResponseMap = new java.util.HashMap<String, String>();
				customerActionResponseMap.put("thirdPartyPayee",
						CustomerActionObj.optString("ThirdPartyPayee"));
				customerActionResponseMap.put("payeeName",
						CustomerActionObj.optString("PayeeName"));
				customerActionResponseMap.put("payType",
						CustomerActionObj.optString("PayType"));
				customerActionResponseMap.put("bankName",
						CustomerActionObj.optString("BankName"));
				customerActionResponseMap.put("accountNumber",
						CustomerActionObj.optString("AccountNumber"));
				customerActionResponseMap.put("swiftCode",
						CustomerActionObj.optString("SwiftCode"));
				customerActionResponseMap.put("routeNumber",
						CustomerActionObj.optString("RoutingCode"));
				customerActionResponseMap.put("addressLine1",
						CustomerActionObj.optString("AddressLine1"));
				customerActionResponseMap.put("addressLine2",
						CustomerActionObj.optString("AddressLine2"));
				customerActionResponseMap.put("countryName",
						CustomerActionObj.optString("Country"));
				customerActionResponseMap.put("state",
						CustomerActionObj.optString("State"));
				customerActionResponseMap.put("city",
						CustomerActionObj.optString("City"));
				customerActionResponseMap.put("zipCode",
						CustomerActionObj.optString("ZipCode"));

				kcontext.setVariable("payloadDisbursementMap",
						customerActionResponseMap);
				kcontext.setVariable("CustomerActionflag", true);

			} else if (customerActionName
					.equalsIgnoreCase("RepaymentAccountDetails")) {

				java.util.Map<String, String> payloadRepaymentMap = (java.util.HashMap<String, String>) kcontext
						.getVariable("payloadRepaymentMap");

				// setting data that is coming from customerAction output
				payloadRepaymentMap.put("bankType",
						CustomerActionObj.optString("BankType"));
				payloadRepaymentMap.put("payType",
						CustomerActionObj.optString("PayType"));
				payloadRepaymentMap.put("bankName",
						CustomerActionObj.optString("BankName"));
				payloadRepaymentMap.put("accountNumber",
						CustomerActionObj.optString("AccountNumber"));
				payloadRepaymentMap.put("routeNumber", CustomerActionObj
						.optString("RoutingCode").equals("")
						? CustomerActionObj.optString("SwiftCode")
						: CustomerActionObj.optString("RoutingCode"));
				kcontext.setVariable("payloadRepaymentMap", payloadRepaymentMap);
				kcontext.setVariable("CustomerActionflag", true);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setfinalDispMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {

			if ((kcontext.getVariable("customerActionName").toString())
					.equalsIgnoreCase("DisbursementDetails")
					&& kcontext.getVariable("CustomerActionflag").toString()
							.equals("true")) {
				kcontext.setVariable("DisbursementDetailsflag", true);

				// set the payloadDisbursementMap to payloadDisbursementMapfinal
				java.util.Map<String, String> payloadDisbursementMaptemp = (java.util.HashMap) kcontext
						.getVariable("payloadDisbursementMap");
				if (kcontext.getVariable("payloadDisbursementMapfinal") != null) {
					payloadDisbursementMaptemp
							.putAll((java.util.HashMap<String, String>) kcontext
									.getVariable("payloadDisbursementMapfinal"));
				}

				kcontext.setVariable("payloadDisbursementMapfinal",
						payloadDisbursementMaptemp);

			} else if ((kcontext.getVariable("customerActionName").toString())
					.equalsIgnoreCase("AccountDetails")
					&& kcontext.getVariable("CustomerActionflag").toString()
							.equals("true")) {
				kcontext.setVariable("AccountDetailsflag", true);

				// set the payloadDisbursementMap to payloadDisbursementMapfinal
				java.util.Map<String, String> payloadDisbursementMaptempp = (java.util.HashMap<String, String>) kcontext
						.getVariable("payloadDisbursementMap");
				if (kcontext.getVariable("payloadDisbursementMapfinal") != null) {
					payloadDisbursementMaptempp
							.putAll((java.util.HashMap<String, String>) kcontext
									.getVariable("payloadDisbursementMapfinal"));
				}

				kcontext.setVariable("payloadDisbursementMapfinal",
						payloadDisbursementMaptempp);

			} else if ((kcontext.getVariable("customerActionName").toString())
					.equalsIgnoreCase("RepaymentAccountDetails")
					&& kcontext.getVariable("CustomerActionflag").toString()
							.equals("true")) {
				kcontext.setVariable("RepaymentAccountDetailsflag", true);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setDrawingsDetails(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject drawingResponse = new org.json.JSONObject(
					(String) kcontext.getVariable("DrawingResponse"));
			if (drawingResponse.has("drawings")) {
				java.util.Map<String, String> _drawingsMap = new java.util.HashMap<String, String>();
				String drawingId;
				java.util.ArrayList _drawingsList = new java.util.ArrayList();
				org.json.JSONArray drawingArray = drawingResponse
						.getJSONArray("drawings");
				if (drawingArray.length() > 0) {
					for (int i = 0; i < drawingArray.length(); i++) {
						org.json.JSONObject drawingObj = drawingArray
								.getJSONObject(i);
						drawingId = drawingObj.optString("drawingId");
						_drawingsList.add(drawingId);
						_drawingsMap.put(drawingId,
								drawingObj.optString("approvedAmount"));
					}
					 java.util.Collections.sort(_drawingsList);
					kcontext.setVariable("DrawingIdsList", _drawingsList);
					kcontext.setVariable("drawingsMap", _drawingsMap);
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setDocumentListForArrangmentId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String docResponse = (String) kcontext
					.getVariable("requestResponse");
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					docResponse);
			org.json.JSONArray documentArray = new org.json.JSONArray(
					responseJSON.getString("documents"));
			java.util.List<java.util.HashMap<String, Object>> documentList = new java.util.ArrayList<java.util.HashMap<String, Object>>();
			for (int i = 0; i < documentArray.length(); i++) {
				org.json.JSONObject documentObj = new org.json.JSONObject(
						documentArray.get(i).toString());
				java.util.HashMap<String, Object> documentData = new java.util.HashMap<String, Object>();
				if ((documentObj.opt("appliesTo")).equals("02")) {
					documentData.put("category",
							documentObj.opt("documentCategory"));
					documentData.put("documentType",
							documentObj.opt("documentType"));
					documentData.put("documentStatus",
							documentObj.opt("documentStatus"));
					documentData.put("documentId",
							documentObj.opt("documentId"));
					documentData.put("lastChangeUserId",
							documentObj.opt("lastChangeUserId"));
					documentData.put("lineOfBusiness",
							documentObj.opt("lineOfBusiness"));
					documentData.put("isSystemGenerated",
							documentObj.opt("isSystemGenerated"));
					documentData.put("arrangementId",
							(String) kcontext.getVariable("accountNumber"));
					// documentData.put("metaDocumentName",
					// documentObj.opt("fileName"));
					// documentData.put("ownerSystemId", "retail");
					// documentData.put("documentGroup", "journey-assist");
					// documentData.put("newOwnerSystemId", "retail");
					// documentData.put("newDocumentGroup", "journey-assist");
					// documentData.put("fileInfo", );(already in Docms)
					// documentData.put("version", );(already in Docms)
					// documentData.put("action", "UPDATE_METADATA");
					documentList.add(documentData);
				}
			}
			kcontext.setVariable("documentsList", documentList);
		} catch (Exception e) {
		}
	}
		public static void setCustomerStatus(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String ResultForFetchConfigurations) {
		try {
			org.json.JSONObject Configuration = new org.json.JSONObject(
					ResultForFetchConfigurations);
			if (Configuration.has("Configuration")) {
				org.json.JSONArray ConfigurationArray = Configuration
						.getJSONArray("Configuration");
				org.json.JSONObject ConfigurationObj = ConfigurationArray
						.getJSONObject(0);
				if (ConfigurationObj.has("value")) {
					kcontext.setVariable("customerStatus",
							ConfigurationObj.optString("value"));
					if (ConfigurationObj.optString("value").equalsIgnoreCase(
							"PROSPECT")) {
						kcontext.setVariable("isProspect", true);
					} else {
						kcontext.setVariable("isProspect", false);
					}
				}
			}
		} catch (Exception e) {

		}
	}
	public static void setAllPartyIds(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			java.util.Set<String> relatedPartyIdList = new java.util.HashSet<>();

			org.json.JSONObject partyResponseJSON = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedParties = partyResponseJSON
					.getJSONArray("relatedParties");

			for (int i = 0; i < relatedParties.length(); i++) {
				org.json.JSONObject currentObj = relatedParties
						.getJSONObject(i);
				String partyID = currentObj.get("relatedPartyId").toString();
				relatedPartyIdList.add(partyID);
			}
			kcontext.setVariable("partyList", relatedPartyIdList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void updatePricings(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String previousGetPricingResponse) {
		try {
			com.fasterxml.jackson.databind.ObjectMapper OBJECT_MAPPER = new com.fasterxml.jackson.databind.ObjectMapper();
			java.util.Map<String, String> finalRequestParams = new java.util.HashMap<String, String>();
			java.util.List<java.util.HashMap<String, Object>> pricingList = new java.util.ArrayList<java.util.HashMap<String, Object>>();
			org.json.JSONObject getPricingResponseJSON = new org.json.JSONObject(previousGetPricingResponse);
			if (getPricingResponseJSON.has("pricing")) {
				org.json.JSONArray pricingArray = getPricingResponseJSON.getJSONArray("pricing");
				java.util.HashMap<String, Object> requestParamsMap=null;
				org.json.JSONObject pricingObj =null;
				if (pricingArray.length() != 0) {
					for (int i = 0; i < pricingArray.length(); i++) {
					    requestParamsMap = new java.util.HashMap<String, Object>();
					    pricingObj = pricingArray.getJSONObject(i);
						requestParamsMap.put("pricingId",pricingObj.optString("pricingId"));
						requestParamsMap.put("requestId",pricingObj.optString("requestId"));
						requestParamsMap.put("facilityId",pricingObj.optString("facilityId"));
						requestParamsMap.put("pricingType",pricingObj.optString("pricingType"));
						requestParamsMap.put("product",pricingObj.optString("product"));
						requestParamsMap.put("lineOfBusiness",pricingObj.optString("lineOfBusiness"));
						requestParamsMap.put("years",pricingObj.optString("years"));
						requestParamsMap.put("months",pricingObj.optString("months"));
						requestParamsMap.put("days", pricingObj.optString("days"));
						requestParamsMap.put("indexType",pricingObj.optString("indexType"));
						requestParamsMap.put("rateBasisId",pricingObj.optString("rateBasisId"));
						requestParamsMap.put("paymentFrequency",pricingObj.optString("paymentFrequency"));
						requestParamsMap.put("rateChangeMethod",pricingObj.optString("rateChangeMethod"));
						requestParamsMap.put("repricingFrequency",pricingObj.optString("repricingFrequency"));
						requestParamsMap.put("baseRate",pricingObj.optString("baseRate"));
						requestParamsMap.put("indicativeBaseRate",pricingObj.optString("indicativeBaseRate"));
						requestParamsMap.put("freezePeriod",pricingObj.optString("freezePeriod"));
						requestParamsMap.put("rateLockDate",pricingObj.optString("rateLockDate"));
						requestParamsMap.put("interestSpread",pricingObj.optString("interestSpread"));
						requestParamsMap.put("interestSpreadType",pricingObj.optString("interestSpreadType"));
						requestParamsMap.put("rateLockExpiryDate",pricingObj.optString("rateLockExpiryDate"));
						requestParamsMap.put("borrowerRate",pricingObj.optString("borrowerRate"));
						requestParamsMap.put("indicativeBorrowerRate",pricingObj.optString("indicativeBorrowerRate"));
						requestParamsMap.put("aprRate",pricingObj.optString("aprRate"));
						requestParamsMap.put("interestCapBasis",pricingObj.optString("interestCapBasis"));
						requestParamsMap.put("interestCap",pricingObj.optString("interestCap"));
						requestParamsMap.put("interestFloorBasis",pricingObj.optString("interestFloorBasis"));
						requestParamsMap.put("interestFloor",pricingObj.optString("interestFloor"));
						requestParamsMap.put("installmentType",pricingObj.optString("installmentType"));
						requestParamsMap.put("repaymentType",pricingObj.optString("repaymentType"));
						requestParamsMap.put("repaymentScheduleType",pricingObj.optString("repaymentScheduleType"));
						requestParamsMap.put("firstInstallmentDate",pricingObj.optString("firstInstallmentDate"));
						requestParamsMap.put("reoccurringInstallmentDate",pricingObj.optString("reoccurringInstallmentDate"));
						requestParamsMap.put("rounding",pricingObj.optString("rounding"));
						requestParamsMap.put("roundingRule",pricingObj.optString("roundingRule"));
						requestParamsMap.put("installmentCurrency",pricingObj.optString("installmentCurrency"));
						requestParamsMap.put("installmentAmount",pricingObj.optString("installmentAmount"));
						requestParamsMap.put("repaymentScheduleDocumentId",pricingObj.optString("repaymentScheduleDocumentId"));
						requestParamsMap.put("repaymentScheduleDocumentName",pricingObj.optString("repaymentScheduleDocumentName"));
						requestParamsMap.put("balloonCurrency",pricingObj.optString("balloonCurrency"));
						requestParamsMap.put("balloonAmount",pricingObj.optString("balloonAmount"));
						requestParamsMap.put("minimumPaymentCurrency",pricingObj.optString("minimumPaymentCurrency"));
						requestParamsMap.put("minimumPaymentAmount",pricingObj.optString("minimumPaymentAmount"));
						requestParamsMap.put("minimumPaymentPercentage",pricingObj.optString("minimumPaymentPercentage"));
						requestParamsMap.put("status", "01");// PRICING_ACCEPTED updating PricingStatus
						requestParamsMap.put("lastChangeUserId",pricingObj.optString("lastChangeUserId"));
						requestParamsMap.put("lastChangeDateTime",pricingObj.optString("lastChangeDateTime"));
						requestParamsMap.put("comments",pricingObj.getJSONArray("pricingComments").toString());// jsonArray
						requestParamsMap.put("drawingId",pricingObj.optString("drawingId"));
						pricingList.add(requestParamsMap);
					}
					 finalRequestParams.put("pricing", (OBJECT_MAPPER.writeValueAsString(pricingList)).replaceAll("\\\\", "").replace("\"[", "[").replace("]\"", "]"));
						
				}
				 
				kcontext.setVariable("updatePricingRequestParams",finalRequestParams);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void differenceInIndicativeBorrowerRate(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String previousGetPricingResponse, String updatedGetPricingResponse) {
		try {
			org.json.JSONObject updatedGetPricingResponseJSON = new org.json.JSONObject(updatedGetPricingResponse);
			boolean flag = false;
			boolean differenceInIndicativeBorrowerRate = false;
			org.json.JSONArray updatedPricingArray = null;
			if (updatedGetPricingResponseJSON.has("pricing")) {
				updatedPricingArray = updatedGetPricingResponseJSON.getJSONArray("pricing");
				if (updatedPricingArray.length() != 0) {
					flag = true;
				}
			}
			org.json.JSONObject previousGetPricingResponseJSON = new org.json.JSONObject(previousGetPricingResponse);
			if (previousGetPricingResponseJSON.has("pricing") && flag) {
				org.json.JSONArray previousPricingArray = previousGetPricingResponseJSON.getJSONArray("pricing");
				if (previousPricingArray.length() != 0) {
					for (int i = 0; i < previousPricingArray.length(); i++) {
						org.json.JSONObject PreviousPricingObj = previousPricingArray.getJSONObject(i);
						for (int j = 0; j < updatedPricingArray.length(); j++) {
							org.json.JSONObject updatedPricingObj = updatedPricingArray.getJSONObject(j);
							if (PreviousPricingObj.optString("pricingId").
							equalsIgnoreCase(updatedPricingObj.optString("pricingId"))) {
	                            if(!(PreviousPricingObj.optString("indicativeBorrowerRate").equalsIgnoreCase
								(updatedPricingObj.optString("indicativeBorrowerRate")))) {
									differenceInIndicativeBorrowerRate = true;
									break;
								}
							}
						}
						if (differenceInIndicativeBorrowerRate) {
							break;
						}
					}
				}
				kcontext.setVariable("differenceInIndicativeBorrowerRate",differenceInIndicativeBorrowerRate);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
}