package com.temenos.infinityassist.retail;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class RetailScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public RetailScripts() {
	}

	public static void setRequestIdAndDocumentList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = kcontext.getVariable("response").toString();
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
			kcontext.setVariable("facilityId",
					responseJSON.getString("facilityId"));
			kcontext.setVariable("documentList",
					responseJSON.optJSONArray("documentsList").toString());
		} catch (Exception e) {

		}
	}

	public static void setRequestId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
		} catch (Exception e) {

		}
	}

	public static void setParties(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			java.util.Set<String> prospectParties = new java.util.HashSet<>();
			java.util.Set<String> existingParties = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				if (partyId.startsWith("NNVF")) {
					prospectParties.add(partyId);
				} else if (partyId.startsWith("ENVF")) {
					existingParties.add(partyId);
				}
			}
			kcontext.setVariable("prospectParties", prospectParties);
			kcontext.setVariable("existingParties", existingParties);
		} catch (Exception e) {

		}
	}

	public static void setUnderReviewFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("03")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void setApprovedFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("01")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void checkCreditDecision(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String decisionResponse) {
		try {
			org.json.JSONObject creditDecisions = new org.json.JSONObject(
					decisionResponse);
			if (creditDecisions.has("decisions")) {
				org.json.JSONArray decisionsArray = creditDecisions
						.getJSONArray("decisions");
				String facilityId = kcontext.getVariable("facilityId")
						.toString();
				for (int index = 0; index < decisionsArray.length(); index++) {
					org.json.JSONObject decision = decisionsArray
							.getJSONObject(index);
					if (decision.get("facilityId").toString()
							.equals(facilityId)
							&& decision.get("finalDecision").toString()
									.equals("true")) {
						if (decision.get("decisionId").equals("02")||decision.get("decisionId").equals("07")) {
							kcontext.setVariable("hasDecision", true);
							kcontext.setVariable("approvalStatusId", "01");
							kcontext.setVariable("approvedAmount", decision.get("approvedAmount").toString());
						}else if(decision.get("decisionId").equals("03")||decision.get("decisionId").equals("08")){
							kcontext.setVariable("hasDecision", true);
							kcontext.setVariable("approvalStatusId", "02");
						} else {
							kcontext.setVariable("hasDecision", false);
						}
						break;
					} else {
						kcontext.setVariable("hasDecision", false);
					}
				}

			} else {
				kcontext.setVariable("hasDecision", false);
			}
		} catch (Exception e) {

		}
	}

	public static void setProductLineId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilityResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilityResponse);
			kcontext.setVariable("productLineId",
					responseJSON.getString("productLineId"));
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String accountId = accountResponse.getString("accountID");
			String effectiveDate = accountResponse.optString("effectiveDate");
			String maturityDate = accountResponse.optString("maturityDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", accountId);
			coreReference.put("type", "ACCOUNT");
			kcontext.setVariable("accountNumber", accountId);
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
				kcontext.setVariable("maturityDate", maturityDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMapForCard(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String cardNumber = accountResponse.getString("cardNumber");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", cardNumber);
			coreReference.put("type", "Card");
			kcontext.setVariable("coreReference", coreReference);
			kcontext.setVariable("accountNumber", cardNumber);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setPartiesByApplicantType(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			String applicantPartyId = "";
			java.util.Set<String> coApplicantPartyIds = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				String partyRole = party.getString("relatedPartyRole");
				if (partyRole.equals("01")) {
					applicantPartyId = partyId;
				} else {
					coApplicantPartyIds.add(partyId);
				}
			}
			kcontext.setVariable("applicantPartyId", applicantPartyId);
			kcontext.setVariable("coApplicantPartyIds", coApplicantPartyIds);
			java.util.Set<String> allPartyIds = new java.util.HashSet<>();
			allPartyIds.add(applicantPartyId);
			allPartyIds.addAll(coApplicantPartyIds);
			kcontext.setVariable("partyIds", allPartyIds);
		} catch (Exception e) {

		}
	}

	public static void setTransactionId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("receiptResponse");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("transactionId",
					responseJSON.getString("transactionId"));
		} catch (Exception e) {

		}
	}

	public static void getTaskDueDate(int slaDays,
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.Date _currentDate = new java.util.Date();
		java.util.Calendar calendar = java.util.Calendar.getInstance();
		calendar.setTime(_currentDate);
		calendar.add(java.util.Calendar.DATE, slaDays);
		java.util.Date _dueDate = calendar.getTime();
		String dueDateStr = new java.text.SimpleDateFormat(
				"yyyy-MM-dd'T'HH:mm:ssXXX").format(_dueDate);
		String isoDueDateStr = new java.text.SimpleDateFormat("yyyy-MM-dd")
				.format(_dueDate);
		kcontext.setVariable("dueDate", dueDateStr);
		kcontext.setVariable("isoDueDate", isoDueDateStr);
	}

	public static void setPartyIdList(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getRelatedPartyResult) {
		try {
			java.util.Set<String> relatedPartyIdList = new java.util.HashSet<>();

			org.json.JSONObject partyResponseJSON = new org.json.JSONObject(
					getRelatedPartyResult);
			org.json.JSONArray relatedParties = partyResponseJSON
					.getJSONArray("relatedParties");

			for (int i = 0; i < relatedParties.length(); i++) {
				org.json.JSONObject currentObj = relatedParties
						.getJSONObject(i);
				String partyID = currentObj.get("relatedPartyId").toString();
				relatedPartyIdList.add(partyID);
			}
			kcontext.setVariable("partyList", relatedPartyIdList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setConfigParameterValue(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String configurationResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					configurationResponse);
			String configValue = responseJSON.getJSONArray("Configuration")
					.getJSONObject(0).getString("value");
			kcontext.setVariable("configurationValue", configValue);
		} catch (Exception e) {

		}
	}

	public static void checkFundingStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (responseJSON.has("funding")) {
				org.json.JSONArray fundingArray = responseJSON
						.getJSONArray("funding");
				if (fundingArray.length() > 0) {
					for (int i = 0; i < fundingArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								fundingArray.get(i).toString());
						if (indEle.get("fundingAcctStatus").equals("01")) {
							kcontext.setVariable("result", "true");
							break;
						} else {
							kcontext.setVariable("result", "false");
						}
					}
				} else {
					kcontext.setVariable("result", "false");
				}
			} else {
				kcontext.setVariable("result", "false");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void formatRetailCreditScoreCardInput(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			com.temenos.infinityassist.retail.RetailCreditScoreParams retailCreditParams = new com.temenos.infinityassist.retail.RetailCreditScoreParams();
			org.json.JSONObject data = new org.json.JSONObject(kcontext
					.getVariable("scoreCardData").toString());
			java.util.Map<String, String> scoreCardValue = new java.util.HashMap<String, String>();
			if (data.has("ScoreCardInputs")) {
				org.json.JSONObject input = data
						.getJSONObject("ScoreCardInputs");
				if (input.has("productIdentifier")
						&& !(input.get("productIdentifier").toString()
								.isEmpty())) {
					retailCreditParams.setProductIdentifier(input.get(
							"productIdentifier").toString());
				}
				if (input.has("bureauScore")
						&& !(input.get("bureauScore").toString().isEmpty())) {
					scoreCardValue.put("bureauScore", input.get("bureauScore")
							.toString());
					retailCreditParams.setBureauScore(Integer.parseInt(input
							.get("bureauScore").toString()));
				}
				if (input.has("relationshipWithBank")
						&& !(input.get("relationshipWithBank").toString()
								.isEmpty())) {
					java.text.SimpleDateFormat s = new java.text.SimpleDateFormat(
							"yyyy-MM-dd");
					java.util.Date givenDate = s.parse(input.get(
							"relationshipWithBank").toString());
					java.util.Date currentdate = new java.util.Date();
					java.util.Calendar d1 = java.util.Calendar.getInstance();
					java.util.Calendar d2 = java.util.Calendar.getInstance();
					d1.setTime(givenDate);
					d2.setTime(currentdate);
					int diff = d2.get(java.util.Calendar.YEAR)
							- d1.get(java.util.Calendar.YEAR);
					if (d1.get(java.util.Calendar.DAY_OF_YEAR) > d2
							.get(java.util.Calendar.DAY_OF_YEAR)) {
						diff--;
					}
					Integer iInteger = Integer.valueOf(diff);
					retailCreditParams.setRelationshipWithBank(iInteger);
					scoreCardValue.put("relationshipWithBank",
							iInteger.toString());
				}
				if (input.has("yearsOfEmployment")
						&& !(input.get("yearsOfEmployment").toString()
								.isEmpty())) {
					scoreCardValue.put("yearsOfEmployment",
							input.get("yearsOfEmployment").toString());
					retailCreditParams
							.setYearsOfEmployment(Integer.parseInt(input.get(
									"yearsOfEmployment").toString()));
				}
				if (input.has("dTIRatio")
						&& !(input.get("dTIRatio").toString().isEmpty())) {
					scoreCardValue.put("dTIRatio", input.get("dTIRatio")
							.toString());
					retailCreditParams.setDebtRatio(Double.valueOf(input.get(
							"dTIRatio").toString()));
				}
				if (input.has("ltvRatio")
						&& !(input.get("ltvRatio").toString().isEmpty())) {
					scoreCardValue.put("ltvRatio", input.get("ltvRatio")
							.toString());
					retailCreditParams.setLtvRatio(Double.valueOf(input.get(
							"ltvRatio").toString()));
				}
				if (input.has("mortgagePropertyType")
						&& !(input.get("mortgagePropertyType").toString()
								.isEmpty())) {
					scoreCardValue.put("propertyType",
							input.get("mortgagePropertyType").toString());
					retailCreditParams.setPropertyType(input.get(
							"mortgagePropertyType").toString());
				}
				if (input.has("netAffordabilityRatio")&& !(input.get("netAffordabilityRatio").toString().isEmpty())) {
					scoreCardValue.put("netAffordRatio", input.get("netAffordabilityRatio").toString());
					retailCreditParams.setNetAffordabilityRatio(Double.valueOf(input.get("netAffordabilityRatio").toString()));
				}
				if (input.has("cashFlowAnalysis")&& !(input.get("cashFlowAnalysis").toString().isEmpty())) {
					scoreCardValue.put("cashFlow", input.get("cashFlowAnalysis").toString());
					retailCreditParams.setCashFlowAnalysis(Double.valueOf(input.get("cashFlowAnalysis").toString()));
				}
			}
			kcontext.setVariable("params", retailCreditParams);
			kcontext.setVariable("scoreCardValues", scoreCardValue);

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}


	public static void formatRetailCreditDecisionInput(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			com.temenos.infinityassist.retail.RetailCreditScoreParams retailCreditParams = new com.temenos.infinityassist.retail.RetailCreditScoreParams();
			if (kcontext.getVariable("scoreCardData") != null) {
				org.json.JSONObject data = new org.json.JSONObject(kcontext
						.getVariable("scoreCardData").toString());
				if (data.has("ScoreCardInputs")) {
					org.json.JSONObject input = data
							.getJSONObject("ScoreCardInputs");
					if (input.has("productIdentifier")
							&& !(input.get("productIdentifier").toString()
									.isEmpty())) {
						retailCreditParams.setProductIdentifier(input.get(
								"productIdentifier").toString());
						kcontext.setVariable("productIdentifier",
								input.get("productIdentifier").toString());
					}
					if (input.has("bureauScore")
							&& !(input.get("bureauScore").toString().isEmpty())) {
						retailCreditParams.setBureauScore(Integer
								.parseInt(input.get("bureauScore").toString()));
					}
					if (input.has("relationshipWithBank")
							&& !(input.get("relationshipWithBank").toString()
									.isEmpty())) {
						java.text.SimpleDateFormat s = new java.text.SimpleDateFormat(
								"yyyy-MM-dd");
						java.util.Date givenDate = s.parse(input.get(
								"relationshipWithBank").toString());
						java.util.Date currentdate = new java.util.Date();
						java.util.Calendar d1 = java.util.Calendar
								.getInstance();
						java.util.Calendar d2 = java.util.Calendar
								.getInstance();
						d1.setTime(givenDate);
						d2.setTime(currentdate);
						int diff = d2.get(java.util.Calendar.YEAR)
								- d1.get(java.util.Calendar.YEAR);
						if (d1.get(java.util.Calendar.DAY_OF_YEAR) > d2
								.get(java.util.Calendar.DAY_OF_YEAR)) {
							diff--;
						}
						Integer iInteger = Integer.valueOf(diff);
						retailCreditParams.setRelationshipWithBank(iInteger);
					}
					if (input.has("yearsOfEmployment")
							&& !(input.get("yearsOfEmployment").toString()
									.isEmpty())) {
						retailCreditParams.setYearsOfEmployment(Integer
								.parseInt(input.get("yearsOfEmployment")
										.toString()));
					}
					if (input.has("dTIRatio")
							&& !(input.get("dTIRatio").toString().isEmpty())) {
						retailCreditParams.setDebtRatio(Double.valueOf(input
								.get("dTIRatio").toString()));
					}
					if (input.has("ltvRatio")
							&& !(input.get("ltvRatio").toString().isEmpty())) {
						retailCreditParams.setLtvRatio(Double.valueOf(input
								.get("ltvRatio").toString()));
					}
				}
			}
			kcontext.setVariable("ScoreCardParams", retailCreditParams);
			com.temenos.infinityassist.retail.RetailCreditScoreOutput decisionParams1 = new com.temenos.infinityassist.retail.RetailCreditScoreOutput();
			decisionParams1.setTotalScore(Integer.parseInt(kcontext
					.getVariable("totalCreditScore").toString()));
			kcontext.setVariable("totalScore", decisionParams1);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void formatInputForSaveDecisionStatusTask(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.Map<String, String> m = new java.util.HashMap<String, String>();
			// java.util.Map decisionRecord = new java.util.HashMap();
			// org.json.JSONArray decisionArray = new org.json.JSONArray();
			m.put("facilityId", kcontext.getVariable("facilityId").toString());
			m.put("requestId", kcontext.getVariable("requestId").toString());
			if (kcontext.getVariable("totalCreditScore") != null) {
				m.put("totalScore", kcontext.getVariable("totalCreditScore")
						.toString());
			} else {
				m.put("totalScore", "0");
			}
			java.util.Date currentdate = new java.util.Date();
			String decisionDateString = new java.text.SimpleDateFormat(
					"yyyy-MM-dd").format(currentdate);
			m.put("decisionDate", decisionDateString);
			java.util.Calendar c1 = java.util.Calendar.getInstance();
			c1.add(java.util.Calendar.DATE, 30);
			String expiryDateString = new java.text.SimpleDateFormat(
					"yyyy-MM-dd").format(c1.getTime());
			m.put("expiryDate", expiryDateString);
			String status = kcontext.getVariable("decisionStatus").toString();
			if (status.equalsIgnoreCase("Auto Approved")) {
				m.put("decisionId", "07");
				m.put("approverUserId", "System Approver");
				m.put("decisionComment", "");
				m.put("finalDecision", "true");
				kcontext.setVariable("decisionStatusID", "07");
				if (kcontext.getVariable("totalAmount") != null) {
					m.put("approvedAmount", kcontext.getVariable("totalAmount")
							.toString());
				}
			} else if (status.equalsIgnoreCase("Auto Declined")) {
				m.put("decisionId", "08");
				m.put("approverUserId", "System Approver");
				m.put("finalDecision", "true");
				if(kcontext.getVariable("isConnectedFacilityDeclined") != null && (Boolean)kcontext.getVariable("isConnectedFacilityDeclined")){
                    //if isConnectedFacilityDeclined true
                    m.put("decisionComment", "Bridge Loan is Declined as connected loan is not approved");  
                }else{
					m.put("decisionComment", "");
				}
				kcontext.setVariable("decisionStatusID", "08");
				m.put("approvedAmount", "0");
			} else {
				m.put("decisionId", "09");
				m.put("approverUserId", "Underwriter");
				m.put("decisionComment", "Under Review");
				m.put("finalDecision", "false");
				kcontext.setVariable("decisionStatusID", "09");
			}
			// decisionArray.put(0, m);
			// decisionRecord.put("creditDecisions", decisionArray);
			kcontext.setVariable("payloadMap", m);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setApplicationQueueInput(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String applicationDataStr) {
		try {
			com.temenos.infinityassist.retail.submitted.ProductQueueInfo retailCreditParams = new com.temenos.infinityassist.retail.submitted.ProductQueueInfo();

			org.json.JSONObject applicationData = new org.json.JSONObject(
					applicationDataStr);

			org.json.JSONArray productInfoArray = applicationData
					.getJSONArray("productInfo");

			java.util.List<com.temenos.infinityassist.retail.submitted.ProductQueueInfo> productList = new java.util.ArrayList<com.temenos.infinityassist.retail.submitted.ProductQueueInfo>();

			for (int i = 0; i < productInfoArray.length(); i++) {
				org.json.JSONObject jsonObj = productInfoArray.getJSONObject(i);
				com.temenos.infinityassist.retail.submitted.ProductQueueInfo product = new com.temenos.infinityassist.retail.submitted.ProductQueueInfo();

				java.lang.String productGroup = jsonObj
						.getString("productGroup");
				product.setProductGroup(productGroup);

				if (jsonObj.has("loanAmount")) {
					java.lang.Float loanAmount = java.lang.Float
							.parseFloat(jsonObj.getString("loanAmount"));
					product.setLoanAmount(loanAmount);
				}

				productList.add(product);
			}

			kcontext.setVariable("productInfo", productList);
			kcontext.setVariable("city", applicationData.getString("city"));
			kcontext.setVariable("state", applicationData.getString("state"));
			kcontext.setVariable("country",
					applicationData.getString("country"));
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setFacilityIdList(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("03")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setComplianceStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String blackListStatus;
			String ofacStatus;
			java.util.Map<String, String> blackListMap = (java.util.HashMap<String, String>) kcontext
					.getVariable("blackListMap");
			java.util.Map<String, String> ofacMap = (java.util.HashMap<String, String>) kcontext
					.getVariable("ofacMap");
			if (blackListMap.containsValue("pass")
					|| blackListMap.containsValue("Pass")) {
				blackListStatus = "pass";
			} else {
				blackListStatus = "Failed";
			}
			if (ofacMap.containsValue("pass") || ofacMap.containsValue("Pass")) {
				ofacStatus = "pass";
			} else {
				ofacStatus = "Failed";
			}
			if (blackListStatus.equals("pass") || ofacStatus.equals("pass")) {
				kcontext.setVariable("complianceStatus", "pass");
			} else {
				kcontext.setVariable("complianceStatus", "Failed");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setReviewComplianceStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String blackListStatus;
			String ofacStatus;
			java.util.Map<String, String> blackListMap = (java.util.HashMap<String, String>) kcontext
					.getVariable("blackListMap");
			java.util.Map<String, String> ofacCheckMap = (java.util.HashMap<String, String>) kcontext
					.getVariable("ofacCheckMap");
			if (blackListMap.containsValue("Failed")
					|| blackListMap.containsValue("failed")) {
				kcontext.setVariable("blackListStatus", "Failed");
			} else {
				kcontext.setVariable("blackListStatus", "pass");
			}

			if (ofacCheckMap.containsValue("Failed")
					|| ofacCheckMap.containsValue("failed")) {
				kcontext.setVariable("ofacStatus", "Failed");
			} else {
				kcontext.setVariable("ofacStatus", "pass");
			}

			if (kcontext.getVariable("blackListStatus").toString()
					.equals("Failed")
					|| kcontext.getVariable("ofacStatus").toString()
							.equals("Failed")) {
				kcontext.setVariable("complianceStatus", "Failed");
			} else {
				kcontext.setVariable("complianceStatus", "pass");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void fecthRequiredCustomerActions(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.List<String> customerActionsList = new java.util.ArrayList<String>();
		String productLineId = kcontext.getVariable("productLineId").toString();
		// if (productLineId.equals("LENDING") ||
		// productLineId.equals("ACCOUNTS")) {
		// customerActionsList.add("UploadSignedOfferDocument");
		// }
		if (productLineId.equals("LENDING")) {
			customerActionsList.add("LendingDisbursementDetails");
		} else if (productLineId.equalsIgnoreCase("Facility")) {
            customerActionsList.add("DisbursementNotaryDetails");
			customerActionsList.add("DisbursementDetails");
			customerActionsList.add("AccountDetails");
			customerActionsList.add("RepaymentAccountDetails");
		}
		kcontext.setVariable("customerActionsList", customerActionsList);
		String customerActionsListStr = customerActionsList.stream()
				.map(n -> String.valueOf(n))
				.collect(java.util.stream.Collectors.joining(","));
		kcontext.setVariable("customerActionsListInput", customerActionsListStr);
	}

	public static void checkSignedOfferLetter(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String documentResponse, String facilityResponse,
			String productLineId) {
		try {
			org.json.JSONObject facilityJSON = new org.json.JSONObject(
					facilityResponse);
			kcontext.setVariable("acceptanceStatus",
					facilityJSON.optString("acceptanceStatus"));
			if (productLineId.equals("XCREDIT.CARDS")) {
				kcontext.setVariable("isSigned", true);
			} else {
				org.json.JSONObject documents = new org.json.JSONObject(
						documentResponse);
				org.json.JSONArray documentsArray = documents
						.getJSONArray("documents");
				kcontext.setVariable("isOfferLetterRejected", false);
				if (documentsArray.length() > 0) {
					for (int index = 0; index < documentsArray.length(); index++) {
						org.json.JSONObject doc = documentsArray
								.getJSONObject(index);
						if (doc.get("documentCategory").toString()
								.equals("agrmnt_doc")
								&& doc.get("documentType").toString()
										.equals("ofr_ltr")
								&& (doc.get("documentStatus").toString()
										.equals("05") || doc
										.get("documentStatus").toString()
										.equals("01"))) {
							kcontext.setVariable("isSigned", true);
							break;
						} else {
							kcontext.setVariable("isSigned", false);
						}

						if (doc.get("documentCategory").toString()
								.equals("agrmnt_doc")
								&& doc.get("documentType").toString()
										.equals("ofr_ltr")
								&& doc.get("documentStatus").toString()
										.equals("06")) {
							kcontext.setVariable("isOfferLetterRejected", true);
							break;
						} else {
							kcontext.setVariable("isOfferLetterRejected", false);
						}
					}
				} else {
					kcontext.setVariable("isSigned", false);
					kcontext.setVariable("isOfferLetterRejected", false);
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkApprovedOfferLetter(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String documentResponse) {
		try {
			org.json.JSONObject documents = new org.json.JSONObject(
					documentResponse);
			org.json.JSONArray documentsArray = documents
					.getJSONArray("documents");
			if (documentsArray.length() > 0) {
				for (int index = 0; index < documentsArray.length(); index++) {

					org.json.JSONObject doc = documentsArray
							.getJSONObject(index);
					if (doc.get("documentCategory").toString()
							.equals("agrmnt_doc")
							&& (doc.get("documentType").toString()
									.equals("ofr_ltr") || doc
									.get("documentType").toString()
									.equals("cust_consnt_offer"))
							&& doc.get("documentStatus").toString()
									.equals("01")) {

						kcontext.setVariable("isApproved", true);
						break;
					} else {
						kcontext.setVariable("isApproved", false);
					}
				}
			} else {
				kcontext.setVariable("isApproved", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getBureauScore(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			String bureauScore = null, facilityPartyId = null;
			java.util.Map<String, String> bureauScoreMap = (java.util.HashMap<String, String>) kcontext
					.getVariable("bureauScoreMap");
			org.json.JSONObject facilityResponseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = facilityResponseJSON
					.getJSONArray("facilities");
			String facilityId = kcontext.getVariable("facilityId").toString();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("facilityId").toString().equals(facilityId)) {
					facilityPartyId = facilityObj.get("partyId").toString();
				}
			}
			bureauScore = bureauScoreMap.get(facilityPartyId);
			kcontext.setVariable("bureauScoreValue", bureauScore);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getProductLine(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject facilityResponseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = facilityResponseJSON
					.getJSONArray("facilities");
			java.util.Map<String, String> _productLineMap = new java.util.HashMap<String, String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				String facilityId = facilityObj.get("facilityId").toString();
				String productLine = facilityObj.get("productLineId")
						.toString();
				_productLineMap.put(facilityId, productLine);
			}
			kcontext.setVariable("productLineMap", _productLineMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void validateNotary(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getNotaryRespMap) {
		try {
			org.json.JSONObject NotaryResponseJSON = new org.json.JSONObject(
					getNotaryRespMap);
			if (NotaryResponseJSON.has("notarys")) {
				org.json.JSONArray NotaryArray = NotaryResponseJSON
						.getJSONArray("notarys");
				if (NotaryArray.length() != 0) {
					for (int i = 0; i < NotaryArray.length(); i++) {
						org.json.JSONObject NotaryObj = NotaryArray
								.getJSONObject(i);
						String notaryId = NotaryObj.optString("notaryId");
						if (notaryId.isEmpty()) {
							kcontext.setVariable("result", false);
						} else {

							kcontext.setVariable("result", true);
							break;
						}

					}
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void assignProductLine(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.Map<String, String> _productLineMap = (java.util.HashMap<String, String>) kcontext
				.getVariable("productLineMap");
		String productLineValue = null;
		if (!_productLineMap.isEmpty()) {
			for (java.util.Map.Entry<String, String> entry : _productLineMap
					.entrySet()) {
				productLineValue = entry.getValue();
				break;
			}
			kcontext.setVariable("productLine", productLineValue);
		}
	}

	public static void getIncomeDocStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject jsonObject = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray documentArray = jsonObject
					.getJSONArray("documents");
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.get("documentCategory").toString()
							.equals("prf_of_inc")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType")
								+ "_"
								+ docObject.getString("partyId");
						String docStatus = docObject.get("documentStatus")
								.toString();
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
						break;
					}
				}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {

			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getCollateralDocStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject jsonObject = new org.json.JSONObject(kcontext
					.getVariable("documentResponse").toString());
			org.json.JSONArray jsonArray = jsonObject.getJSONArray("documents");
			boolean value = true;
			if (jsonArray.length() == 0) {
				value = false;
			}
			int collateral_docs = 0;
			for (int i = 0; i < jsonArray.length(); i++) {
				String category = jsonArray.getJSONObject(i).getString(
						"documentCategory");
				String status = jsonArray.getJSONObject(i).getString(
						"documentStatus");
				if (category.equals("collatrl_doc")) {
					collateral_docs = collateral_docs + 1;
					if (status.equals("02")) {
						value = false;
						break;
					}
				}
			}
			if (collateral_docs == 0) {
				value = false;
			}
			kcontext.setVariable("collateralDocStatus", value);
		} catch (Exception e) {

		}
	}

	public static void getDocumentDetails(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject documentsObject = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			org.json.JSONArray documentArray = documentsObject
					.getJSONArray("documents");
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.getString("documentCategory").equals(
							"prf_of_add_indvid")
							|| docObject.getString("documentCategory").equals(
									"prf_of_iden")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType");
						String docStatus = docObject
								.getString("documentStatus");
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
						break;
					}
				}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void getDocumentDetailsForVerification(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject documentsObject = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			org.json.JSONArray documentArray = documentsObject
					.getJSONArray("documents");
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.getString("documentCategory").equals(
							"prf_of_add_indvid")
							|| docObject.getString("documentCategory").equals(
									"prf_of_iden")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType")
								+ "_"
								+ docObject.getString("partyId");
						String docStatus = docObject
								.getString("documentStatus");
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
						break;
					}
				}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void setAmountMapForFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.Map<String, String> _amountMap = new java.util.HashMap<String, String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("03")) {
					_amountMap.put(facilityObj.get("facilityId").toString(),
							facilityObj.get("totalAmount").toString());
				}
			}
			kcontext.setVariable("amountMap", _amountMap);
		} catch (Exception e) {

		}
	}

	public static void setDrawingIds(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String drawingResponse) {
		try {
			java.util.Set<String> drawingIdList = new java.util.HashSet<>();
			org.json.JSONObject getDrawingResponse = new org.json.JSONObject(
					drawingResponse);
			org.json.JSONArray drawingsArray = getDrawingResponse
					.optJSONArray("drawings");
			if (drawingsArray.length() > 0) {
				for (int index = 0; index < drawingsArray.length(); index++) {
					org.json.JSONObject drawingObject = drawingsArray
							.getJSONObject(index);
					String drawingId = drawingObject.optString("drawingId");
					drawingIdList.add(drawingId);
				}
				kcontext.setVariable("drawingIdList", drawingIdList);
			}
		} catch (Exception e) {

		}
	}

	public static void setDrawingAccountId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String drawingsResponse) {
		try {
			org.json.JSONObject drawingResponse = new org.json.JSONObject(
					drawingsResponse);
			org.json.JSONArray drawings = drawingResponse
					.getJSONArray("drawings");
			org.json.JSONObject drawings_Request = new org.json.JSONObject();
			org.json.JSONArray drawingRequest = new org.json.JSONArray();
			if (drawings.length() > 0) {
				org.json.JSONObject drawing = drawings.getJSONObject(0);
				drawing.put("coreRefrenceType", "ACCOUNT");
				if (kcontext.getVariable("drawingAccountId") != null) {
					drawing.put("coreRefrenceId",
							kcontext.getVariable("drawingAccountId"));
				}
				if (kcontext.getVariable("effectiveDate") != null) {
					drawing.put("startDate",
							kcontext.getVariable("effectiveDate"));
				}
				if (kcontext.getVariable("maturityDate") != null) {
					drawing.put("maturityDate",
							kcontext.getVariable("maturityDate"));
				}
				// Term
				org.json.JSONObject term = drawing.getJSONObject("term");
				drawing.put("years", term.optString("years"));
				drawing.put("months", term.optString("months"));
				drawing.put("days", term.optString("days"));
				// Fixed Term
				org.json.JSONObject fixedTerm = drawing
						.getJSONObject("fixedInterestTerm");
				drawing.put("interestYears",
						fixedTerm.optString("interestYears"));
				drawing.put("interestMonths",
						fixedTerm.optString("interestMonths"));
				drawing.put("interestDays", fixedTerm.optString("interestDays"));
				drawingRequest.put(drawing);
			} else {
				org.json.JSONObject drawing = new org.json.JSONObject();
				drawingRequest.put(drawing);
			}
			drawings_Request.put("drawings", drawingRequest);
			kcontext.setVariable("drawingsRequest", drawings_Request.toString());
		} catch (Exception e) {

		}
	}

	public static void getDocumentStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject jsonObject = new org.json.JSONObject(kcontext
					.getVariable("documentResponse").toString());
			org.json.JSONArray jsonArray = jsonObject.getJSONArray("documents");
			java.util.List<String> documentCategory = new java.util.ArrayList<String>();
			java.util.Map<String, String> docMap = new java.util.HashMap<>();
			documentCategory.add("prf_of_inc");
			documentCategory.add("prf_of_add_indvid");
			documentCategory.add("prf_of_iden");
			String documentFlag = "false";
			String remortgageDocFlag = "false";
			for (int i = 0; i < jsonArray.length(); i++) {
				String category = jsonArray.getJSONObject(i).getString(
						"documentCategory");
				String type = jsonArray.getJSONObject(i).getString(
						"documentType");
				String status = jsonArray.getJSONObject(i).getString(
						"documentStatus");
				if (status.equals("01")) {
					docMap.put(category, status);
				}
				if (kcontext.getVariable("loanPurpose").toString()
						.equals("Remortgage")) {
					if (category.equals("prd_doc")
							&& type.equals("mrtg_loan_outstndng_stmnt")) {
						if (status.equals("01") || status.equals("02")) {
							remortgageDocFlag = "true";
						} else {
							remortgageDocFlag = "false";
							break;
						}
					}
				}
			}
			for (String docCategory : documentCategory) {
				if (docMap.containsKey(docCategory)) {
					documentFlag = "true";
				} else {
					documentFlag = "false";
					break;
				}
			}
			if (kcontext.getVariable("loanPurpose").toString()
					.equals("Remortgage")) {
				if (documentFlag.equals("true")
						&& remortgageDocFlag.equals("true")) {
					documentFlag = "true";
				} else {
					documentFlag = "false";
				}
			}
			kcontext.setVariable("documentStatus", documentFlag);
		} catch (Exception e) {
		}
	}

	public static void getRejectedReasons(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("referenceData").toString());
			org.json.JSONArray _rejectedReasonArray = responseJSON
					.getJSONArray("rejectedReason");
			String _rejectedreasons = null;
			for (int i = 0; i < _rejectedReasonArray.length(); i++) {
				org.json.JSONObject reasonObject = new org.json.JSONObject(
						_rejectedReasonArray.get(i).toString());
				if (!reasonObject.get("value").equals("")) {
					if (i == 0) {
						_rejectedreasons = reasonObject.get("description")
								.toString();
					} else {
						_rejectedreasons = _rejectedreasons + ", "
								+ reasonObject.get("description").toString();
					}
				}
			}
			kcontext.setVariable("rejectedReasons", _rejectedreasons);
			kcontext.setVariable("rejectedReasonArray",
					_rejectedReasonArray.toString());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	
	public static void getRejectedReasonValue(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String rejectedReason) {
		try {
			org.json.JSONArray rejectedReasonArray = new org.json.JSONArray(
					kcontext.getVariable("rejectedReasonArray").toString());
			String _rejectedReasonValue = null;
			for (int i = 0; i < rejectedReasonArray.length(); i++) {
				org.json.JSONObject reasonObject = new org.json.JSONObject(
						rejectedReasonArray.get(i).toString());
				if ((rejectedReason != null)
						&& rejectedReason.equals(reasonObject
								.get("description").toString())) {
					_rejectedReasonValue = reasonObject.get("value").toString();
					break;
				}
			}
			kcontext.setVariable("rejectedReasonValue", _rejectedReasonValue);
		} catch (Exception e) {

		}
	}
	public static void getLineOfBusiness(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject facilityResponseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = facilityResponseJSON
					.getJSONArray("facilities");
			String lineOfBusiness = "";
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = facilitiesArray
						.optJSONObject(i);
				lineOfBusiness = facilityObj.optString("lineOfBusiness");
				if (!lineOfBusiness.equals("")) {
					break;
				}
			}
			kcontext.setVariable("lineOfBusiness", lineOfBusiness);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getRemortgageBankDetails(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject remortgageResponseJSON = new org.json.JSONObject(
					kcontext.getVariable("remortgageInfoResponse").toString());
			org.json.JSONArray remortgageInfoArray = remortgageResponseJSON
					.getJSONArray("remortgageInfo");
			boolean resultFlag = false;
			String bankName, accountNumber = "";
			for (int i = 0; i < remortgageInfoArray.length(); i++) {
				org.json.JSONObject remortgageInfoObj = remortgageInfoArray
						.optJSONObject(i);
				org.json.JSONObject remortgageBankDetailsObj = remortgageInfoObj
						.optJSONObject("bankDetails");
				bankName = remortgageBankDetailsObj.optString("bankName");
				accountNumber = remortgageBankDetailsObj
						.optString("accountNumber");
				if (bankName.equals("") || accountNumber.equals("")) {
					resultFlag = false;
				} else {
					resultFlag = true;
				}
			}
			kcontext.setVariable("remortgageBankDetailsFlag", resultFlag);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	
	public static void setEvidenceValidationPayload(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject documentJSON = new org.json.JSONObject(
					kcontext.getVariable("document").toString());
			java.util.Map<String, String> inputParams = new java.util.HashMap<>();

			if (documentJSON != null && documentJSON.length() != 0) {
				inputParams.put("validateResult", "accepted");
				inputParams.put("evidenceType", documentJSON.optString("documentType"));
				inputParams.put("lineOfBusiness", documentJSON.optString("lineOfBusiness"));
				inputParams.put("appEvidenceId", documentJSON.optString("appEvidenceId"));
				inputParams.put("isReusable", documentJSON.optString("isReusable"));
				inputParams.put("appliesTo", documentJSON.optString("appliesTo"));
				inputParams.put("comments", "accepted");
				java.time.LocalDate expiryDate = java.time.LocalDate.now().plusMonths(3);
				inputParams.put("expiryDate", expiryDate.toString());
			}

			kcontext.setVariable("inputParams", inputParams);

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void prepareDocumentListForValidation(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext.getVariable("docResponse").toString());

			if (responseJSON.has("documents") && responseJSON.get("documents") != null) {
				java.util.List<Object> docList = new java.util.ArrayList<Object>();
				org.json.JSONArray documentsArray = responseJSON.getJSONArray("documents");
				for (int i = 0; i < documentsArray.length(); i++) {
					org.json.JSONObject documentObj = documentsArray.getJSONObject(i);
					if (!documentObj.getString("documentStatus").equals("01")) {
						docList.add(documentsArray.getJSONObject(i).toString());
					}
				}
				kcontext.setVariable("documentsList", docList);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void updateDocumentStatusInOPMS(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			System.out.println("docResponse " + kcontext
					.getVariable("docResponse").toString());
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext.getVariable("docResponse").toString());
			java.util.HashMap<String, Object> documentRespMap = new java.util.HashMap<String, Object>();
			documentRespMap = new com.google.gson.Gson().fromJson(responseJSON.toString(), java.util.HashMap.class);

			if (documentRespMap.containsKey("documents") && documentRespMap.get("documents") != null) {
				java.util.List<java.util.Map<String, String>> documentListMap = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.Map<String, java.util.List<java.util.Map<String, String>>> updateDocumentMap = new java.util.HashMap<String, java.util.List<java.util.Map<String, String>>>();
				java.util.List<java.util.Map<String, String>> documentsArray = (java.util.ArrayList<java.util.Map<String, String>>) documentRespMap
						.get("documents");
				for (int i = 0; i < documentsArray.size(); i++) {
					java.util.Map<String, String> eachDocumentMap = new java.util.HashMap<String, String>();
					eachDocumentMap = documentsArray.get(i);
					eachDocumentMap.put("documentStatus", "01");
					documentListMap.add(eachDocumentMap);
				}
				updateDocumentMap.put("documents", documentListMap);
				kcontext.setVariable("updateDocMap", updateDocumentMap);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	
	public static void copyPaymentScheduleToOPMS(
			org.kie.api.runtime.process.ProcessContext kcontext, String facilityId, String requestId) {
		try {
			org.json.JSONObject combinedScheduleResp = new org.json.JSONObject(
					kcontext.getVariable("scheduleResponse").toString());
			org.json.JSONArray scheduleBodyArray = combinedScheduleResp.getJSONArray("body");
			String drawingId = kcontext.getVariable("drawingId").toString();

			java.util.Map<String, Object> paymentScheudleInp = new java.util.HashMap<String, Object>();
			java.util.List<Object> schedulesArray = new java.util.ArrayList<>();
			java.util.Map<String, Object> scheduleObject = new java.util.HashMap<String, Object>();

			scheduleObject.put("drawingId", drawingId);
			scheduleObject.put("facilityId", facilityId);
			scheduleObject.put("requestId", requestId);
			scheduleObject.put("simulationType", "01");

			org.json.JSONObject schedulebodyObj = new org.json.JSONObject();
			java.util.List<Object> simulationArray = new java.util.ArrayList<>();

			for (int i = 0; i < scheduleBodyArray.length(); i++) {
				java.util.List<Object> scheduleDetailsArray = new java.util.ArrayList<>();
				java.util.Map<String, Object> simulationObj = new java.util.HashMap<String, Object>();
				schedulebodyObj = scheduleBodyArray.getJSONObject(i);
				simulationObj.put("totalPayment", schedulebodyObj.optString("totalPayment"));
				simulationObj.put("outstandingAmount", schedulebodyObj.optString("outstandingAmount"));
				String dueDateString = schedulebodyObj.optString("scheduleDate");
				simulationObj.put("dueDate", dueDateString);

				java.util.Map<String, String> scheduleDetailsObjForLinear = new java.util.HashMap<String, String>();
				scheduleDetailsObjForLinear.put("dueAmount", schedulebodyObj.optString("totalPrincipal"));
				scheduleDetailsObjForLinear.put("propertyAmount", schedulebodyObj.optString("totalPrincipal"));
				scheduleDetailsObjForLinear.put("paymentTypeName", "Linear Principal.");
				scheduleDetailsObjForLinear.put("property", "Account");
				scheduleDetailsArray.add(scheduleDetailsObjForLinear);

				java.util.Map<String,String> scheduleDetailsObjForInterest = new java.util.HashMap<String,String>();
				scheduleDetailsObjForInterest.put("dueAmount", schedulebodyObj.optString("totalInterest"));
				scheduleDetailsObjForInterest.put("propertyAmount", schedulebodyObj.optString("totalInterest"));
				scheduleDetailsObjForInterest.put("paymentTypeName", "Interest Only Payment");
				scheduleDetailsObjForInterest.put("property", "Principal Interest");
				scheduleDetailsArray.add(scheduleDetailsObjForInterest);

				simulationObj.put("scheduleDetails", scheduleDetailsArray);
				simulationArray.add(simulationObj);
			}
			scheduleObject.put("simulations", simulationArray);
			schedulesArray.add(scheduleObject);
			paymentScheudleInp.put("paymentSchedules", schedulesArray);
			kcontext.setVariable("paymentScheduleOPMSInp", paymentScheudleInp);

		} catch (Exception e) {
			System.out.println("Exception:" + e.toString());
		}
	}
}