package com.temenos.infinityassist.retail;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class RetailDepositsScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public RetailDepositsScripts() {
	}

	public static void setRequestId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
		} catch (Exception e) {

		}
	}

	public static void setParties(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			java.util.Set<String> prospectParties = new java.util.HashSet<>();
			java.util.Set<String> existingParties = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				if (partyId.startsWith("NNVF")) {
					prospectParties.add(partyId);
				} else if (partyId.startsWith("ENVF")) {
					existingParties.add(partyId);
				}
			}
			kcontext.setVariable("prospectParties", prospectParties);
			kcontext.setVariable("existingParties", existingParties);
		} catch (Exception e) {

		}
	}

	public static void setUnderReviewFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("03")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void setApprovedFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = new org.json.JSONArray(
					responseJSON.get("facilities").toString());
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int i = 0; i < facilitiesArray.length(); i++) {
				org.json.JSONObject facilityObj = new org.json.JSONObject(
						facilitiesArray.get(i).toString());
				if (facilityObj.get("approvalStatusId").toString().equals("01")) {
					facilityList.add(facilityObj.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void checkDepositsDecision(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String decisionResponse) {
		try {
			org.json.JSONObject depositsDecisions = new org.json.JSONObject(
					decisionResponse);
			if (depositsDecisions.has("decisions")) {
				org.json.JSONArray decisionsArray = depositsDecisions
						.getJSONArray("decisions");
				String facilityId = kcontext.getVariable("facilityId")
						.toString();
				for (int index = 0; index < decisionsArray.length(); index++) {
					org.json.JSONObject decision = decisionsArray
							.getJSONObject(index);
					if (decision.get("facilityId").toString()
							.equals(facilityId)
							&& decision.get("finalDecision").toString()
									.equals("true")
							&& (decision.get("decisionId").equals("02") || decision
									.get("decisionId").equals("03"))) {
						kcontext.setVariable("hasDecision", true);
						if (decision.get("decisionId").equals("02"))
							kcontext.setVariable("approvalStatusId", "01");
						else if (decision.get("decisionId").equals("03"))
							kcontext.setVariable("approvalStatusId", "02");
						break;
					} else {
						kcontext.setVariable("hasDecision", false);
					}
				}
			} else {
				kcontext.setVariable("hasDecision", false);
			}
		} catch (Exception e) {

		}
	}

	public static void setProductLineId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilityResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilityResponse);
			kcontext.setVariable("productLineId",
					responseJSON.getString("productLineId"));
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String accountId = accountResponse.getString("accountID");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", accountId);
			coreReference.put("type", "ACCOUNT");
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setCoreReferenceMapForCard(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String cardNumber = accountResponse.getString("cardNumber");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", cardNumber);
			coreReference.put("type", "Card");
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void setPartiesByApplicantType(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			String applicantPartyId = "";
			java.util.Set<String> coApplicantPartyIds = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				String partyRole = party.getString("relatedPartyRole");
				if (partyRole.equals("01")) {
					applicantPartyId = partyId;
				} else {
					coApplicantPartyIds.add(partyId);
				}
			}
			kcontext.setVariable("applicantPartyId", applicantPartyId);
			kcontext.setVariable("coApplicantPartyIds", coApplicantPartyIds);
			java.util.Set<String> allPartyIds = new java.util.HashSet<>();
			allPartyIds.add(applicantPartyId);
			allPartyIds.addAll(coApplicantPartyIds);
			kcontext.setVariable("partyIds", allPartyIds);
		} catch (Exception e) {

		}
	}

	public static void setTransactionId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("receiptResponse");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("transactionId",
					responseJSON.getString("transactionId"));
		} catch (Exception e) {

		}
	}

	public static void getTaskDueDate(int slaDays,
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.Date _currentDate = new java.util.Date();
		java.util.Calendar calendar = java.util.Calendar.getInstance();
		calendar.setTime(_currentDate);
		calendar.add(java.util.Calendar.DATE, slaDays);
		java.util.Date _dueDate = calendar.getTime();
		String dueDateStr = new java.text.SimpleDateFormat(
				"yyyy-MM-dd'T'HH:mm:ssXXX").format(_dueDate);
		kcontext.setVariable("dueDate", dueDateStr);
	}

	public static void setPartyIdList(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getRelatedPartyResult) {
		try {
			java.util.Set<String> relatedPartyIdList = new java.util.HashSet<>();

			org.json.JSONObject partyResponseJSON = new org.json.JSONObject(
					getRelatedPartyResult);
			org.json.JSONArray relatedParties = partyResponseJSON
					.getJSONArray("relatedParties");

			for (int i = 0; i < relatedParties.length(); i++) {
				org.json.JSONObject currentObj = relatedParties
						.getJSONObject(i);
				String partyID = currentObj.get("relatedPartyId").toString();
				relatedPartyIdList.add(partyID);
			}
			kcontext.setVariable("partyList", relatedPartyIdList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setConfigParameterValue(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String configurationResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					configurationResponse);
			String configValue = responseJSON.getJSONArray("Configuration")
					.getJSONObject(0).getString("value");
			kcontext.setVariable("configurationValue", configValue);
		} catch (Exception e) {

		}
	}

	public static void checkFundingStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (responseJSON.has("funding")) {
				org.json.JSONArray fundingArray = responseJSON
						.getJSONArray("funding");
				if (fundingArray.length() > 0) {
					for (int i = 0; i < fundingArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								fundingArray.get(i).toString());
						if (indEle.get("fundingAcctStatus").equals("01")) {
							kcontext.setVariable("result", "true");
							break;
						} else {
							kcontext.setVariable("result", "false");
						}
					}
				} else {
					kcontext.setVariable("result", "false");
				}
			} else {
				kcontext.setVariable("result", "false");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setFundingData(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("applicationData").toString());
			org.json.JSONArray fundingArray = responseJSON
					.getJSONArray("fundingProducts");
			String applicationData = (String) kcontext
					.getVariable("applicationData");
			com.google.gson.JsonObject appJson = new com.google.gson.JsonParser()
					.parse(applicationData).getAsJsonObject();
			java.util.List<java.util.Map<String, String>> fundingProductsMap = new java.util.ArrayList<java.util.Map<String, String>>();
			com.google.gson.JsonArray fundingProductsArray = appJson
					.get("fundingProducts") != null ? appJson.get(
					"fundingProducts").getAsJsonArray() : null;
			fundingProductsArray
					.forEach(item -> {
						java.util.Map<String, String> fundingMap = new java.util.HashMap<String, String>();
						com.google.gson.JsonObject fundingEle = (com.google.gson.JsonObject) item;
						fundingMap.put("FundingProductId", fundingEle
								.get("FundingProductId") != null ? fundingEle
								.get("FundingProductId").getAsString() : "");
						fundingMap.put("FundingCDPlanId", fundingEle
								.get("FundingCDPlanId") != null ? fundingEle
								.get("FundingCDPlanId").getAsString() : "");
						fundingProductsMap.add(fundingMap);
					});
			kcontext.setVariable("fundingProducts", fundingProductsMap);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setApplicationStatus(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getApplicationData) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					getApplicationData);
			String status = responseJSON.getString("status");
			kcontext.setVariable("status", status);

		} catch (Exception e) {

		}
	}
	public static void checkApplicationStatus(
			org.kie.api.runtime.process.ProcessContext kcontext, String status) {
		try {
			if (status.equals("AutoApproved") || status.equals("AutoDenied")) {
				kcontext.setVariable("hasSignal", false);
			} else {
				kcontext.setVariable("hasSignal", true);
			}

		} catch (Exception e) {

		}
	}	

}