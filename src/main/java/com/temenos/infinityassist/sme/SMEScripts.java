package com.temenos.infinityassist.sme;

/**
 * This class was automatically generated by the data modeler tool.
 */

public class SMEScripts implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	public SMEScripts() {
	}

	public static void setRequestIdAndDocumentList(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = kcontext.getVariable("response").toString();
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
			kcontext.setVariable("documentList",
					responseJSON.optJSONArray("documentsList").toString());
		} catch (Exception e) {

		}
	}

	public static void setRequestId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("requestId",
					responseJSON.getString("requestId"));
		} catch (Exception e) {

		}
	}

	public static void setCompanyIds(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("companyCifId",
					responseJSON.getString("coreCustomerId"));
			kcontext.setVariable("companyPartyId",
					responseJSON.getString("partyID"));
		} catch (Exception e) {

		}
	}

	public static void checkSignedOfferLetter(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String documentResponse, String productLineId) {
		try {
			org.json.JSONObject documents = new org.json.JSONObject(
					documentResponse);
			int counter = Integer.parseInt(kcontext.getVariable("count")
					.toString());
			if (productLineId.equals("XCREDIT.CARDS")) {
				if (counter == 1) {
					kcontext.setVariable("isSigned", false);
				} else {
					kcontext.setVariable("isSigned", true);
				}

			} else {
				org.json.JSONArray documentsArray = documents
						.getJSONArray("documents");
				if (documentsArray.length() > 0) {
					for (int index = 0; index < documentsArray.length(); index++) {
						org.json.JSONObject doc = documentsArray
								.getJSONObject(index);
						if (doc.get("documentCategory").toString()
								.equals("agrmnt_doc")
								&& doc.get("documentType").toString()
										.equals("ofr_ltr")
								&& doc.get("documentStatus").toString()
										.equals("05")) {
							kcontext.setVariable("isSigned", true);
							break;
						} else {
							kcontext.setVariable("isSigned", false);
						}
					}
				} else {
					kcontext.setVariable("isSigned", false);
				}
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void checkApprovedOfferLetter(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String documentResponse) {
		try {
			org.json.JSONObject documents = new org.json.JSONObject(
					documentResponse);
			org.json.JSONArray documentsArray = documents
					.getJSONArray("documents");
			if (documentsArray.length() > 0) {
				for (int index = 0; index < documentsArray.length(); index++) {
					org.json.JSONObject doc = documentsArray
							.getJSONObject(index);
					if (doc.get("documentCategory").toString()
							.equals("agrmnt_doc")
							&& (doc.get("documentType").toString()
									.equals("ofr_ltr") || doc.get("documentType").toString()
									.equals("cust_consnt_offer"))
							&& doc.get("documentStatus").toString()
									.equals("01")) {
						kcontext.setVariable("isApproved", true);
						break;
					} else {
						kcontext.setVariable("isApproved", false);
					}
				}
			} else {
				kcontext.setVariable("isApproved", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setParties(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			java.util.Set<String> prospectParties = new java.util.HashSet<>();
			java.util.Set<String> existingParties = new java.util.HashSet<>();
			java.util.Map<String, String> partyMap = new java.util.HashMap<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				String role = party.getString("relatedPartyRole");
				partyMap.put(partyId, role);
				if (partyId.startsWith("NNVF")) {
					if (role.equals("01")) {
						kcontext.setVariable("isCompanyExisting", false);
					} else {
						prospectParties.add(partyId);
					}
				} else if (partyId.startsWith("ENVF")) {
					if (role.equals("01")) {
						kcontext.setVariable("existingNonverifiedCompanyId",
								partyId);
						kcontext.setVariable("isCompanyExisting", true);
					} else if (!role.equals("09")) {
						existingParties.add(partyId);
					}
				}
			}
			kcontext.setVariable("partyRoleMap", partyMap);
			kcontext.setVariable("prospectParties", prospectParties);
			kcontext.setVariable("existingParties", existingParties);
		} catch (Exception e) {

		}
	}

	public static void getFacilities(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilitiesResponse) {
		try {
			org.json.JSONObject facilities = new org.json.JSONObject(
					facilitiesResponse);
			org.json.JSONArray facilitiesArray = facilities
					.getJSONArray("facilities");
			java.util.List<String> facilityList = new java.util.ArrayList<String>();
			for (int index = 0; index < facilitiesArray.length(); index++) {
				org.json.JSONObject facility = facilitiesArray
						.getJSONObject(index);
				if (facility.get("approvalStatusId").toString().equals("03")) {
					facilityList.add(facility.get("facilityId").toString());
				}
			}
			kcontext.setVariable("facilitiesList", facilityList);
		} catch (Exception e) {

		}
	}

	public static void setTransactionId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			String response = (String) kcontext.getVariable("response");
			org.json.JSONObject responseJSON = new org.json.JSONObject(response);
			kcontext.setVariable("transactionId",
					responseJSON.getString("transactionId"));
		} catch (Exception e) {

		}
	}

	public static void checkCreditDecision(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String decisionResponse) {
		try {
			org.json.JSONObject creditDecisions = new org.json.JSONObject(
					decisionResponse);
			if (creditDecisions.has("decisions")) {
				org.json.JSONArray decisionsArray = creditDecisions
						.getJSONArray("decisions");
				String facilityId = kcontext.getVariable("facilityId")
						.toString();
				for (int index = 0; index < decisionsArray.length(); index++) {
					org.json.JSONObject decision = decisionsArray
							.getJSONObject(index);
					if (decision.get("facilityId").toString()
							.equals(facilityId)
							&& decision.get("finalDecision").toString()
									.equals("true")
							&& (decision.get("decisionId").toString()
									.equals("02")
									|| decision.get("decisionId").toString()
											.equals("07")
									|| decision.get("decisionId").toString()
											.equals("08") || decision
									.get("decisionId").toString().equals("03"))) {
						kcontext.setVariable("hasDecision", true);
						if (decision.get("decisionId").toString().equals("02")
								|| decision.get("decisionId").toString()
										.equals("07")) {
							kcontext.setVariable("approvalStatusId", "01");
							kcontext.setVariable("approvedAmount", decision
									.get("approvedAmount").toString());
						} else if (decision.get("decisionId").toString()
								.equals("03")) {
							kcontext.setVariable("approvalStatusId", "02");
						} else if (decision.get("decisionId").toString()
								.equals("08")) {
							kcontext.setVariable("approvalStatusId", "02");
						}
						break;
					} else {
						kcontext.setVariable("hasDecision", false);
					}
				}
			} else {
				kcontext.setVariable("hasDecision", false);
			}
		} catch (Exception e) {

		}
	}

	public static void checkFinancialRatioResults(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String financialResultResponse) {
		try {
			org.json.JSONObject responseObj = new org.json.JSONObject(
					financialResultResponse);
			if (responseObj.has("financialResults")) {
				org.json.JSONArray financialResultsArray = responseObj
						.getJSONArray("financialResults");
				org.json.JSONObject financialResults = financialResultsArray
						.getJSONObject(0);
				String month = financialResults.get("month").toString();
				String year = financialResults.get("year").toString();
				if (financialResultsArray.length() > 0) {
					String pastDate = String.format("01-%s-%s", month, year);
					java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(
							"dd-MM-yyyy");
					java.util.Date inputDataDate = sdf.parse(pastDate);
					java.util.Date currentDate = new java.util.Date();
					double numberOfDays = (currentDate.getTime() - inputDataDate
							.getTime()) / (1000 * 60 * 60 * 24);
					if (numberOfDays < 365) {
						kcontext.setVariable("result", "Approved");
					} else {
						kcontext.setVariable("result", "Rejected");
					}
				} else {
					kcontext.setVariable("result", "Rejected");
				}
			} else {
				kcontext.setVariable("result", "Rejected");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void checkSMEFunding(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			if (responseJSON.has("funding")) {
				org.json.JSONArray fundingArray = responseJSON
						.getJSONArray("funding");
				if (fundingArray.length() > 0) {
					for (int i = 0; i < fundingArray.length(); i++) {
						org.json.JSONObject indEle = new org.json.JSONObject(
								fundingArray.get(i).toString());
						if (indEle.get("fundingAcctStatus").equals("02")
								|| indEle.get("fundingAcctStatus").equals("03")) {
							kcontext.setVariable("result", "true");
							break;
						} else {
							kcontext.setVariable("result", "false");
						}
					}
				} else {
					kcontext.setVariable("result", "true");
				}
			} else {
				kcontext.setVariable("result", "true");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setProductLineId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String facilityResponse) {
		try {
			org.json.JSONObject responseJSON = new org.json.JSONObject(
					facilityResponse);
			String product = responseJSON.getString("product");
			kcontext.setVariable("productLineId",responseJSON.getString("productLineId"));
			if(product.equals("BB.SMALL.BUSINESS.LOAN") || product.equals("BB.START.UP.ACCOUNT") || product.equals("BB.PREMIUM.ACCOUNT") || product.equals("BB.STANDARD.ACCOUNT")){
				kcontext.setVariable("serviceName","createSMEBusinessAccountOrLoans");
			} else {
				kcontext.setVariable("serviceName","CreateSMEAccount");
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setCoreReferenceMapForCard(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String cardNumber = accountResponse.getString("cardNumber");
			String effectiveDate = accountResponse.optString("effectiveDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", cardNumber);
			coreReference.put("type", "Card");
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
			}
		} catch (Exception e) {

		}
	}

	public static void getTaskDueDate(int slaDays,
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.Date _currentDate = new java.util.Date();
		java.util.Calendar calendar = java.util.Calendar.getInstance();
		calendar.setTime(_currentDate);
		calendar.add(java.util.Calendar.DATE, slaDays);
		java.util.Date _dueDate = calendar.getTime();
		String dueDateStr = new java.text.SimpleDateFormat(
				"yyyy-MM-dd'T'HH:mm:ssXXX").format(_dueDate);
		String isoDueDateStr = new java.text.SimpleDateFormat("yyyy-MM-dd")
				.format(_dueDate);
		kcontext.setVariable("dueDate", dueDateStr);
		kcontext.setVariable("isoDueDate", isoDueDateStr);
	}
	public static void getDigitalProfileIds(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String relatedPartiesResponse) {
		try {
			org.json.JSONObject relatedParties = new org.json.JSONObject(
					relatedPartiesResponse);
			org.json.JSONArray relatedPartiesArray = relatedParties
					.getJSONArray("relatedParties");
			java.util.Set<String> prospectParties = new java.util.HashSet<>();
			java.util.Set<String> existingParties = new java.util.HashSet<>();
			for (int index = 0; index < relatedPartiesArray.length(); index++) {
				org.json.JSONObject party = relatedPartiesArray
						.getJSONObject(index);
				String partyId = party.getString("relatedPartyId");
				String role = party.getString("relatedPartyRole");
				if (partyId.startsWith("NNVF") && !role.equals("09")) {
					prospectParties.add(partyId.replaceAll("NNVF", ""));
				} else if (partyId.startsWith("ENVF") && !role.equals("09")) {
					existingParties.add(partyId.replaceAll("ENVF", ""));
				}
			}
			kcontext.setVariable("prospectParties", prospectParties);
			kcontext.setVariable("existingParties", existingParties);
		} catch (Exception e) {

		}
	}

	public static void setRelatedPartyODMSData(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String odmsResponse) {
		try {
			com.temenos.infinityassist.sme.submitted.ODMSRelatedPartyInformationParams odmsDTO = new com.temenos.infinityassist.sme.submitted.ODMSRelatedPartyInformationParams();
			org.json.JSONObject odmsJSONObject = new org.json.JSONObject(
					odmsResponse);

			odmsDTO.setFirstName(odmsJSONObject.optString("firstName"));
			odmsDTO.setLastName(odmsJSONObject.optString("lastName"));
			// odmsDTO.setRole(odmsJSONObject.optString("role"));
			// odmsDTO.setPercentageOfOwnership(odmsJSONObject
			// .optString("percentageOfOwnership"));
			odmsDTO.setRelationshipWithCompany(odmsJSONObject
					.optString("relationshipWithCompany"));

			// set identity details data
			org.json.JSONArray identityDetails = odmsJSONObject
					.optJSONArray("partyIdentifiers");
			org.json.JSONObject identityJSONObject = identityDetails
					.optJSONObject(0);
			odmsDTO.setIdNumber(identityJSONObject
					.optString("identifierNumber"));
			odmsDTO.setExpirationDate(identityJSONObject
					.optString("expiryDate"));
			odmsDTO.setIssuedDate(identityJSONObject.optString("issuedDate"));
			odmsDTO.setIssuedCountry(identityJSONObject
					.optString("issuingCountry"));
			// making is dummy- PartyMS does not have this field - start
			// odmsDTO.setIssuedState(identityJSONObject.optString("IssuingState"));
			odmsDTO.setIssuedState("Dummy");
			// making is dummy- PartyMS does not have this field - end
			odmsDTO.setIdentityType(identityJSONObject.optString("type"));

			// set address related details data
			org.json.JSONArray addressJSONArray = odmsJSONObject
					.optJSONArray("addresses");
			for (int i = 0; i < addressJSONArray.length(); i++) {
				org.json.JSONObject addressJSONObject = addressJSONArray
						.optJSONObject(i);
				if (addressJSONObject.optString("communicationType").equals(
						"MailingAddress")) {
					odmsDTO.setCity(addressJSONObject.optString("town"));
					odmsDTO.setState(addressJSONObject
							.optString("countrySubdivision"));
					odmsDTO.setZipCode(addressJSONObject
							.optString("postalOrZipCode"));

					if (addressJSONObject.optJSONArray("addressFreeFormat")
							.length() == 2) {
						org.json.JSONArray addressFreeFormatArray = addressJSONObject
								.optJSONArray("addressFreeFormat");
						String address1 = (addressFreeFormatArray
								.optJSONObject(0)).optString("addressLine");
						String address2 = (addressFreeFormatArray
								.optJSONObject(1)).optString("addressLine");
						odmsDTO.setAddressLine1(address1);
						odmsDTO.setAddressLine2(address2);
					}
				}
				if (addressJSONObject.optString("communicationType").equals(
						"Mobile")) {
					odmsDTO.setCountryCode(addressJSONObject
							.optString("iddPrefixPhone"));
					odmsDTO.setPhoneNumber(addressJSONObject
							.optString("phoneNo"));
				}
				if (addressJSONObject.optString("communicationType").equals(
						"Email")) {
					odmsDTO.setEmailAddress(addressJSONObject
							.optString("electronicAddress"));
				}

			}
			kcontext.setVariable("payloadDEODMSRelated", odmsDTO);
			System.out.println("Related Party ODMS DTO Object Values");
			System.out.println("First Name : " + odmsDTO.getFirstName());
			System.out.println("Lase Name : " + odmsDTO.getLastName());
			System.out.println("Email Address : " + odmsDTO.getEmailAddress());
			System.out.println("Country Code : " + odmsDTO.getCountryCode());
			System.out.println("Phone Number : " + odmsDTO.getPhoneNumber());
			System.out.println("Relationship with Company : "
					+ odmsDTO.getRelationshipWithCompany());
			System.out.println("Identity Type : " + odmsDTO.getIdentityType());
			System.out.println("Id Number : " + odmsDTO.getIdNumber());
			System.out
					.println("Issued Country : " + odmsDTO.getIssuedCountry());
			System.out.println("issued State : " + odmsDTO.getIssuedState());
			System.out.println("Issued Date : " + odmsDTO.getIssuedDate());
			System.out.println("Expiry Date : " + odmsDTO.getExpirationDate());
			System.out.println("Address Line1 : " + odmsDTO.getAddressLine1());
			System.out.println("Address Line2 : " + odmsDTO.getAddressLine2());
			System.out.println("City : " + odmsDTO.getCity());
			System.out.println("State : " + odmsDTO.getState());
			System.out.println("ZipCode : " + odmsDTO.getZipCode());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void setRelatedPartyRelation(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String partyRelationsResponse) {
		try {
			org.json.JSONObject partyRelationsJSONObject = new org.json.JSONObject(
					partyRelationsResponse);
			org.json.JSONArray partyRelationsDetails = partyRelationsJSONObject
					.optJSONArray("partyRelations");
			for (int i = 0; i < partyRelationsDetails.length(); i++) {
				org.json.JSONObject partyRelations = partyRelationsDetails
						.optJSONObject(i);
				kcontext.setVariable("relationType",
						partyRelations.optString("relationType"));
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void setRelatedPartyMSData(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String partyResponse) {
		try {
			com.temenos.infinityassist.sme.submitted.PartyRelatedInformationParams partyDTO = new com.temenos.infinityassist.sme.submitted.PartyRelatedInformationParams();
			org.json.JSONObject partyJSONObject = new org.json.JSONObject(
					partyResponse);
			kcontext.setVariable("partyId",
					partyJSONObject.optString("partyId"));
			partyDTO.setFirstName(partyJSONObject.optString("firstName"));
			partyDTO.setLastName(partyJSONObject.optString("lastName"));
			// partyDTO.setRole(partyJSONObject.optString("role"));
			// partyDTO.setPercentageOfOwnership(partyJSONObject.optString("percentageOfOwnership"));

			partyDTO.setRelationshipWithCompany(kcontext.getVariable(
					"relationType").toString());
			// set identity details data
			org.json.JSONArray identityDetails = partyJSONObject
					.optJSONArray("partyIdentifiers");
			for (int i = 0; i < identityDetails.length(); i++) {
				org.json.JSONObject identityJSONObject = identityDetails
						.optJSONObject(i);
				String identifierType = identityJSONObject.optString("type");
				if (identifierType.equals("Driver License")
						|| identifierType.equals("Passport")) {
					partyDTO.setIdNumber(identityJSONObject
							.optString("identifierNumber"));
					partyDTO.setExpirationDate(identityJSONObject
							.optString("expiryDate"));
					partyDTO.setIssueDate(identityJSONObject
							.optString("issuedDate"));
					partyDTO.setIssuedCountry(identityJSONObject
							.optString("issuingCountry"));
					// making is dummy- PartyMS does not have this field - start
					// partyDTO.setIssuedState(identityJSONObject
					// .optString("issuingState"));
					partyDTO.setIssuedState("Dummy");
					// making is dummy- PartyMS does not have this field - end
					partyDTO.setIdentityType(identityJSONObject
							.optString("type"));
				}
			}

			// set address related details data
			org.json.JSONArray addressJSONArray = partyJSONObject
					.optJSONArray("addresses");
			for (int i = 0; i < addressJSONArray.length(); i++) {
				org.json.JSONObject addressJSONObject = addressJSONArray
						.optJSONObject(i);
				if (addressJSONObject.optString("communicationType").equals(
						"MailingAddress")) {
					partyDTO.setCity(addressJSONObject.optString("town"));
					partyDTO.setState(addressJSONObject
							.optString("countrySubdivision"));
					partyDTO.setZipCode(addressJSONObject
							.optString("postalOrZipCode"));

					String address1 = addressJSONObject
							.optString("buildingName");
					String address2 = addressJSONObject.optString("streetName");
					partyDTO.setAddressLine1(address1);
					partyDTO.setAddressLine2(address2);
				}
				if (addressJSONObject.optString("communicationType").equals(
						"Mobile")) {
					partyDTO.setCountryCode(addressJSONObject
							.optString("iddPrefixPhone"));
					partyDTO.setPhoneNumber(addressJSONObject
							.optString("phoneNo"));
				}
				if (addressJSONObject.optString("communicationType").equals(
						"Email")) {
					partyDTO.setEmailAddress(addressJSONObject
							.optString("electronicAddress"));
				}

			}
			kcontext.setVariable("payloadDEPartyMSRelated", partyDTO);
			System.out.println("Related Party PartyMS DTO Object Values");
			System.out.println("First Name : " + partyDTO.getFirstName());
			System.out.println("Lase Name : " + partyDTO.getLastName());
			System.out.println("Email Address : " + partyDTO.getEmailAddress());
			System.out.println("Country Code : " + partyDTO.getCountryCode());
			System.out.println("Phone Number : " + partyDTO.getPhoneNumber());
			System.out.println("Relationship with Company : "
					+ partyDTO.getRelationshipWithCompany());
			System.out.println("Identity Type : " + partyDTO.getIdentityType());
			System.out.println("Id Number : " + partyDTO.getIdNumber());
			System.out.println("Issued Country : "
					+ partyDTO.getIssuedCountry());
			System.out.println("Issued State : " + partyDTO.getIssuedState());
			System.out.println("Issued Date : " + partyDTO.getIssueDate());
			System.out.println("Expiry Date : " + partyDTO.getExpirationDate());
			System.out.println("Address Line1 : " + partyDTO.getAddressLine1());
			System.out.println("Address Line2 : " + partyDTO.getAddressLine2());
			System.out.println("City : " + partyDTO.getCity());
			System.out.println("State : " + partyDTO.getState());
			System.out.println("ZipCode : " + partyDTO.getZipCode());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void formatSMERiskScoreCardInput(
			org.kie.api.runtime.process.ProcessContext kcontext, String partyId) {
		try {
			com.temenos.infinityassist.sme.SMERiskScoreParams smeRiskParams = new com.temenos.infinityassist.sme.SMERiskScoreParams();

			java.util.Map<String, String> riskscoreCardDataMap = (java.util.HashMap) kcontext
					.getVariable("riskscoreCardDataMap");
			org.json.JSONObject scoreCardValue = new org.json.JSONObject();
			String currentPartyId = partyId.toString();
			if (!riskscoreCardDataMap.isEmpty()) {
				for (java.util.HashMap.Entry<String, String> entry : riskscoreCardDataMap
						.entrySet()) {
					System.out.println("Key = " + entry.getKey() + ", Value = "
							+ entry.getValue());

					if ((currentPartyId).equalsIgnoreCase(entry.getKey())) {
						System.out.println("Key = " + entry.getKey()
								+ ", Value = " + entry.getValue() + " "
								+ "currentPartyId is = " + currentPartyId);
						org.json.JSONObject riskScore = new org.json.JSONObject(
								entry.getValue());
						org.json.JSONObject input;
						if (riskScore.has("OrganisationRiskScoreInputs")) {
							System.out
									.println("Inside OrganisationRiskScoreInputs");
							input = riskScore
									.getJSONObject("OrganisationRiskScoreInputs");
							// set partyType
							smeRiskParams.setPartyType("Organisation");
							kcontext.setVariable("partyType", "Organisation");
							// set companyBureauScore
							if (input.has("companyBureauScore")
									&& !(input.get("companyBureauScore")
											.toString().isEmpty())) {
								smeRiskParams.setCompanyBureauScore(Integer
										.parseInt(input.get(
												"companyBureauScore")
												.toString()));
								scoreCardValue.put("bureauScore",
										input.get("companyBureauScore")
												.toString());
								System.out
										.println("company's companyBureauScore : "
												+ input.get(
														"companyBureauScore")
														.toString());
							}
							// set relationshipwithBank
							if (input.has("relationshipWithBank")
									&& !(input.get("relationshipWithBank")
											.toString().isEmpty())) {
								smeRiskParams.setRelationshipWithBank(Integer
										.parseInt(input.get(
												"relationshipWithBank")
												.toString()));
								scoreCardValue.put("relationshipWithBank",
										input.get("relationshipWithBank")
												.toString());
								System.out
										.println("company relation with bank : "
												+ input.get(
														"relationshipWithBank")
														.toString());
							}
							// set yearsOfOperation
							if (input.has("yearsOfOperation")
									&& !(input.get("yearsOfOperation")
											.toString().isEmpty())) {
								smeRiskParams.setYearsOfOperation(Integer
										.parseInt(input.get("yearsOfOperation")
												.toString()));
								scoreCardValue.put("yearsOfOperation", input
										.get("yearsOfOperation").toString());
								System.out
										.println("company years of operation : "
												+ input.get("yearsOfOperation")
														.toString());
							}

						} else if (riskScore.has("IndividualRiskScoreInputs")) {
							System.out
									.println("Inside IndividualRiskScoreInputs");
							input = riskScore
									.getJSONObject("IndividualRiskScoreInputs");
							// set partyType
							smeRiskParams.setPartyType("Individual");
							kcontext.setVariable("partyType", "Individual");
							// set partyBureauScore
							if (input.has("partyBureauScore")
									&& !(input.get("partyBureauScore")
											.toString().isEmpty())) {
								smeRiskParams.setPartyBureauScore(Integer
										.parseInt(input.get("partyBureauScore")
												.toString()));
								scoreCardValue.put("bureauScore",
										input.get("partyBureauScore")
												.toString());
								System.out.println("indvl partyBureauScore : "
										+ input.get("partyBureauScore")
												.toString());
							}
							// set relationshipwithBank
							if (input.has("relationshipWithBank")
									&& !(input.get("relationshipWithBank")
											.toString().isEmpty())) {
								smeRiskParams.setRelationshipWithBank(Integer
										.parseInt(input.get(
												"relationshipWithBank")
												.toString()));
								scoreCardValue.put("relationshipWithBank",
										input.get("relationshipWithBank")
												.toString());
								System.out
										.println("indivl relation with bank: "
												+ input.get(
														"relationshipWithBank")
														.toString());
							}
							// set age
							if (input.has("age")
									&& !(input.get("age").toString().isEmpty())) {
								smeRiskParams.setPartyAge(Integer
										.parseInt(input.get("age").toString()));
								scoreCardValue.put("age", input.get("age")
										.toString());
								System.out.println("indivl age : "
										+ input.get("age").toString());
							}
						}
						System.out
								.println("smeRiskParams getCompanyBureauScore: "
										+ smeRiskParams.getCompanyBureauScore());
						System.out
								.println("smeRiskParams getRelationshipWithBank: "
										+ smeRiskParams
												.getRelationshipWithBank());
						System.out.println("smeRiskParams getPartyAge : "
								+ smeRiskParams.getPartyAge());
						System.out
								.println("smeRiskParams getPartyBureauScore : "
										+ smeRiskParams.getPartyBureauScore());
						System.out
								.println("smeRiskParams getYearsOfOperation : "
										+ smeRiskParams.getYearsOfOperation());
						System.out.println("smeRiskParams getPartyType : "
								+ smeRiskParams.getPartyType());
					}

				}
				kcontext.setVariable("SMERiskScoreParams", smeRiskParams);
				kcontext.setVariable("riskScoreCardValues",
						scoreCardValue.toString());
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void formatSMECreditScoreCardInput(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			com.temenos.infinityassist.sme.SMECreditScoreParams smeCreditParams = new com.temenos.infinityassist.sme.SMECreditScoreParams();
			org.json.JSONObject data = new org.json.JSONObject(kcontext
					.getVariable("scoreCardData").toString());
			java.util.Map<String, String> scoreCardValue = new java.util.HashMap<String, String>();
			if (data.has("ScoreCardInputs")) {
				org.json.JSONObject input = data
						.getJSONObject("ScoreCardInputs");
				if (input.has("productIdentifier")
						&& !(input.get("productIdentifier").toString()
								.isEmpty())) {
					smeCreditParams.setProductIdentifier(input.get(
							"productIdentifier").toString());
				}
				if (input.has("companyBureauScore")
						&& !(input.get("companyBureauScore").toString()
								.isEmpty())) {
					scoreCardValue.put("companyBureauScore",
							input.get("companyBureauScore").toString());
					smeCreditParams.setCompanyBureauScore(Integer
							.parseInt(input.get("companyBureauScore")
									.toString()));
				}
				if (input.has("partyBureauScore")
						&& !(input.get("partyBureauScore").toString().isEmpty())) {
					scoreCardValue.put("partyBureauScore",
							input.get("partyBureauScore").toString());
					smeCreditParams.setPartyBureauScore(Integer.parseInt(input
							.get("partyBureauScore").toString()));
				}
				if (input.has("relationshipWithBank")
						&& !(input.get("relationshipWithBank").toString()
								.isEmpty())) {
					java.text.SimpleDateFormat s = new java.text.SimpleDateFormat(
							"yyyy-MM-dd");
					java.util.Date givenDate = s.parse(input.get(
							"relationshipWithBank").toString());
					java.util.Date currentdate = new java.util.Date();
					java.util.Calendar d1 = java.util.Calendar.getInstance();
					java.util.Calendar d2 = java.util.Calendar.getInstance();
					d1.setTime(givenDate);
					d2.setTime(currentdate);
					int diff = d2.get(java.util.Calendar.YEAR)
							- d1.get(java.util.Calendar.YEAR);
					if (d1.get(java.util.Calendar.DAY_OF_YEAR) > d2
							.get(java.util.Calendar.DAY_OF_YEAR)) {
						diff--;
					}
					Integer iInteger = Integer.valueOf(diff);
					smeCreditParams.setRelationshipWithBank(iInteger);
					scoreCardValue.put("relationshipWithBank",
							iInteger.toString());
				}
				if (input.has("yearsOfEmployment")
						&& !(input.get("yearsOfEmployment").toString()
								.isEmpty())) {
					scoreCardValue.put("yearsOfEmployment",
							input.get("yearsOfEmployment").toString());
					smeCreditParams.setYearsOfEmployment(Integer.parseInt(input
							.get("yearsOfEmployment").toString()));
				}
				if (input.has("managementAssessment")
						&& !(input.get("managementAssessment").toString()
								.isEmpty())) {
					smeCreditParams.setManagementAssessment(input.get(
							"managementAssessment").toString());
				}
				if (input.has("dSCR")
						&& !(input.get("dSCR").toString().isEmpty())) {
					scoreCardValue.put("dSCR", input.get("dSCR").toString());
					smeCreditParams.setDebtServiceCoverRatio(Double
							.valueOf(input.get("dSCR").toString()));
				}
				if (input.has("financialLeverage")
						&& !(input.get("financialLeverage").toString()
								.isEmpty())) {
					scoreCardValue.put("financialLeverage",
							input.get("financialLeverage").toString());
					smeCreditParams.setFinancialLeverage(Double.valueOf(input
							.get("financialLeverage").toString()));
				}
				if (input.has("netProfitMargin")
						&& !(input.get("netProfitMargin").toString().isEmpty())) {
					scoreCardValue.put("netProfitMargin",
							input.get("netProfitMargin").toString());
					smeCreditParams.setNetProfitMargin(Double.valueOf(input
							.get("netProfitMargin").toString()));
				}
				if (input.has("operatingMargin")
						&& !(input.get("operatingMargin").toString().isEmpty())) {
					scoreCardValue.put("operatingMargin",
							input.get("operatingMargin").toString());
					smeCreditParams.setOperatingMargin(Double.valueOf(input
							.get("operatingMargin").toString()));
				}
				if (input.has("currentRatio")
						&& !(input.get("currentRatio").toString().isEmpty())) {
					scoreCardValue.put("currentRatio", input
							.get("currentRatio").toString());
					smeCreditParams.setCurrentRatio(Double.valueOf(input.get(
							"currentRatio").toString()));
				}
			}
			kcontext.setVariable("scoreCardValues", scoreCardValue);
			kcontext.setVariable("params", smeCreditParams);

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void formatSMECreditDecisionInput(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			com.temenos.infinityassist.sme.SMECreditScoreParams smeCreditParams = new com.temenos.infinityassist.sme.SMECreditScoreParams();
			if (kcontext.getVariable("scoreCardData") != null) {
				org.json.JSONObject data = new org.json.JSONObject(kcontext
						.getVariable("scoreCardData").toString());
				if (data.has("ScoreCardInputs")) {
					org.json.JSONObject input = data
							.getJSONObject("ScoreCardInputs");
					if (input.has("productIdentifier")
							&& !(input.get("productIdentifier").toString()
									.isEmpty())) {
						smeCreditParams.setProductIdentifier(input.get(
								"productIdentifier").toString());
						kcontext.setVariable("productIdentifier",
								input.get("productIdentifier").toString());
					}
					if (input.has("companyBureauScore")
							&& !(input.get("companyBureauScore").toString()
									.isEmpty())) {
						smeCreditParams.setCompanyBureauScore(Integer
								.parseInt(input.get("companyBureauScore")
										.toString()));
					}
					if (input.has("partyBureauScore")
							&& !(input.get("partyBureauScore").toString()
									.isEmpty())) {
						smeCreditParams.setPartyBureauScore(Integer
								.parseInt(input.get("partyBureauScore")
										.toString()));
					}
					if (input.has("relationshipWithBank")
							&& !(input.get("relationshipWithBank").toString()
									.isEmpty())) {
						java.text.SimpleDateFormat s = new java.text.SimpleDateFormat(
								"yyyy-MM-dd");
						java.util.Date givenDate = s.parse(input.get(
								"relationshipWithBank").toString());
						java.util.Date currentdate = new java.util.Date();
						java.util.Calendar d1 = java.util.Calendar
								.getInstance();
						java.util.Calendar d2 = java.util.Calendar
								.getInstance();
						d1.setTime(givenDate);
						d2.setTime(currentdate);
						int diff = d2.get(java.util.Calendar.YEAR)
								- d1.get(java.util.Calendar.YEAR);
						if (d1.get(java.util.Calendar.DAY_OF_YEAR) > d2
								.get(java.util.Calendar.DAY_OF_YEAR)) {
							diff--;
						}
						Integer iInteger = Integer.valueOf(diff);
						smeCreditParams.setRelationshipWithBank(iInteger);
					}
					if (input.has("yearsOfEmployment")
							&& !(input.get("yearsOfEmployment").toString()
									.isEmpty())) {
						smeCreditParams.setYearsOfEmployment(Integer
								.parseInt(input.get("yearsOfEmployment")
										.toString()));
					}
					if (input.has("managementAssessment")
							&& !(input.get("managementAssessment").toString()
									.isEmpty())) {
						smeCreditParams.setManagementAssessment(input.get(
								"managementAssessment").toString());
					}
					if (input.has("dSCR")
							&& !(input.get("dSCR").toString().isEmpty())) {
						smeCreditParams.setDebtServiceCoverRatio(Double
								.valueOf(input.get("dSCR").toString()));
					}
					if (input.has("financialLeverage")
							&& !(input.get("financialLeverage").toString()
									.isEmpty())) {
						smeCreditParams.setFinancialLeverage(Double
								.valueOf(input.get("financialLeverage")
										.toString()));
					}
					if (input.has("netProfitMargin")
							&& !(input.get("netProfitMargin").toString()
									.isEmpty())) {
						smeCreditParams.setNetProfitMargin(Double.valueOf(input
								.get("netProfitMargin").toString()));
					}
					if (input.has("operatingMargin")
							&& !(input.get("operatingMargin").toString()
									.isEmpty())) {
						smeCreditParams.setOperatingMargin(Double.valueOf(input
								.get("operatingMargin").toString()));
					}
					if (input.has("currentRatio")
							&& !(input.get("currentRatio").toString().isEmpty())) {
						smeCreditParams.setCurrentRatio(Double.valueOf(input
								.get("currentRatio").toString()));
					}
				}
			}
			kcontext.setVariable("ScoreCardParams", smeCreditParams);

			com.temenos.infinityassist.sme.SMECreditScoreOutput decisionParams1 = new com.temenos.infinityassist.sme.SMECreditScoreOutput();
			decisionParams1.setTotalScore(Integer.parseInt(kcontext
					.getVariable("totalCreditScore").toString()));
			kcontext.setVariable("totalScore", decisionParams1);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void formatInputForSMESaveDecisionStatusTask(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			java.util.Map<String, String> m = new java.util.HashMap<String, String>();
			// java.util.Map decisionRecord = new java.util.HashMap();
			// org.json.JSONArray decisionArray = new org.json.JSONArray();
			m.put("facilityId", kcontext.getVariable("facilityId").toString());
			m.put("requestId", kcontext.getVariable("requestId").toString());
			java.util.Date currentdate = new java.util.Date();
			String decisionDateString = new java.text.SimpleDateFormat(
					"yyyy-MM-dd").format(currentdate);
			m.put("decisionDate", decisionDateString);
			java.util.Calendar c1 = java.util.Calendar.getInstance();
			c1.add(java.util.Calendar.DATE, 30);
			String expiryDateString = new java.text.SimpleDateFormat(
					"yyyy-MM-dd").format(c1.getTime());
			m.put("expiryDate", expiryDateString);
			if (kcontext.getVariable("totalCreditScore") != null) {
				m.put("totalScore", kcontext.getVariable("totalCreditScore")
						.toString());
			} else {
				m.put("totalScore", "0");
			}
			String status = kcontext.getVariable("decisionStatus").toString();
			if (status.equalsIgnoreCase("Auto Approved")) {
				m.put("decisionId", "07");
				m.put("approverUserId", "System Approver");
				m.put("decisionComment", "");
				m.put("finalDecision", "true");
				kcontext.setVariable("decisionStatusID", "07");
				if (kcontext.getVariable("totalAmount") != null) {
					m.put("approvedAmount", kcontext.getVariable("totalAmount")
							.toString());
				}
				if (kcontext.getVariable("currencyId") != null) {
					m.put("currencyId", kcontext.getVariable("currencyId")
							.toString());
				}
			} else if (status.equalsIgnoreCase("Auto Declined")) {
				m.put("decisionId", "08");
				m.put("approverUserId", "System Approver");
				m.put("decisionComment", "");
				m.put("finalDecision", "true");
				kcontext.setVariable("decisionStatusID", "08");
				m.put("approvedAmount", "0");
			} else {
				m.put("decisionId", "09");
				m.put("approverUserId", "Underwriter");
				m.put("decisionComment", "Under Review");
				m.put("finalDecision", "false");
				kcontext.setVariable("decisionStatusID", "09");
			}
			// decisionArray.put(0, m);
			// decisionRecord.put("creditDecisions",decisionArray);
			kcontext.setVariable("payloadMap", m);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	/**
	 *
	 * @param kcontext
	 * @param getRelatedPartyResult
	 */
	public static void setPartyIdList(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String getRelatedPartyResult) {
		try {
			java.util.Set<String> relatedPartyIdList = new java.util.HashSet<>();

			org.json.JSONObject partyResponseJSON = new org.json.JSONObject(
					getRelatedPartyResult);
			org.json.JSONArray relatedParties = partyResponseJSON
					.getJSONArray("relatedParties");

			for (int i = 0; i < relatedParties.length(); i++) {
				org.json.JSONObject currentObj = relatedParties
						.getJSONObject(i);
				String partyID = currentObj.get("relatedPartyId").toString();
				relatedPartyIdList.add(partyID);
			}
			kcontext.setVariable("partyList", relatedPartyIdList);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void setCompanyPartyODMSData(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String odmsResponse) {
		try {
			com.temenos.infinityassist.sme.submitted.ODMSPartyInformationParams odmsCompanyDTO = new com.temenos.infinityassist.sme.submitted.ODMSPartyInformationParams();
			org.json.JSONObject odmsJSONObject = new org.json.JSONObject(
					odmsResponse);
			odmsCompanyDTO.setCompanyName(odmsJSONObject
					.optString("entityName"));
			odmsCompanyDTO.setCompanyType(odmsJSONObject
					.optString("organisationLegalType"));
			odmsCompanyDTO.setIndustryType(odmsJSONObject
					.optString("industryType").toUpperCase());
			odmsCompanyDTO.setSubIndustryType(odmsJSONObject
					.optString("subIndustryType").toUpperCase());
			odmsCompanyDTO.setCountryOfIncorporation(odmsJSONObject
					.optString("incorporationCountry"));
			String registrationDate = odmsJSONObject
					.optString("registrationDate");
			String yearsInBusiness = "";
			if (!registrationDate.isEmpty()) {
				yearsInBusiness = Integer.valueOf(
						calculateYearsInBusiness(registrationDate)).toString();
			}
			odmsCompanyDTO.setYearsInBusiness(yearsInBusiness); // yearsInBusiness
			// String yearsInBusiness = Integer.valueOf(
			// calculateYearsInBusiness(registrationDate)).toString();
			// odmsCompanyDTO.setYearsInBusiness(yearsInBusiness);
			odmsCompanyDTO.setRegistrationId(odmsJSONObject
					.optString("registrationId"));
			odmsCompanyDTO.setRegistrationDate(registrationDate);
			// set partyIdentifiers details
			org.json.JSONArray partyIdentifiersDetails = odmsJSONObject
					.optJSONArray("partyIdentifiers");
			org.json.JSONObject partyIdentifiersJSONObject = partyIdentifiersDetails
					.optJSONObject(0);
			odmsCompanyDTO.setExpiryDate(partyIdentifiersJSONObject
					.optString("expiryDate"));
			odmsCompanyDTO.setTaxId(partyIdentifiersJSONObject
					.optString("taxId"));

			// set addresses of company details
			org.json.JSONArray addressJSONArray = odmsJSONObject
					.optJSONArray("addresses");
			for (int i = 0; i < addressJSONArray.length(); i++) {
				org.json.JSONObject addressJSONObject = addressJSONArray
						.optJSONObject(i);
				if (addressJSONObject.optString("communicationType").equals(
						"MailingAddress")) {
					if (addressJSONObject.optJSONArray("addressFreeFormat")
							.length() == 2) {
						org.json.JSONArray addressFreeFormatArray = addressJSONObject
								.optJSONArray("addressFreeFormat");
						String address1 = (addressFreeFormatArray
								.optJSONObject(0)).optString("addressLine");
						String address2 = (addressFreeFormatArray
								.optJSONObject(1)).optString("addressLine");
						odmsCompanyDTO.setCompanyAddressLine1(address1);
						odmsCompanyDTO.setCompanyAddressLine2(address2);
					}
					odmsCompanyDTO.setCountry(addressJSONObject
							.optString("countryCode"));
					odmsCompanyDTO.setState(addressJSONObject
							.optString("countrySubdivision"));
					odmsCompanyDTO.setCity(addressJSONObject.optString("town"));
					odmsCompanyDTO.setZipCode(addressJSONObject
							.optString("postalOrZipCode"));
				}
			}
			// set contacts details
			org.json.JSONArray contactsJSONArray = odmsJSONObject
					.optJSONArray("contacts");
			for (int i = 0; i < contactsJSONArray.length(); i++) {
				org.json.JSONObject contactsJSONObject = contactsJSONArray
						.optJSONObject(i);
				odmsCompanyDTO.setCountryCode(contactsJSONObject
						.optString("code"));
				odmsCompanyDTO.setPhoneNumber(contactsJSONObject
						.optString("number"));
			}

			kcontext.setVariable("payloadDEODMSCompany", odmsCompanyDTO);
			System.out.println("Company ODMS DTO Object Values");
			System.out.println("Company Name : "
					+ odmsCompanyDTO.getCompanyName());
			System.out.println("Company Type : "
					+ odmsCompanyDTO.getCompanyType());
			System.out.println("Industry Type : "
					+ odmsCompanyDTO.getIndustryType());
			System.out.println("Sub-Industry Type : "
					+ odmsCompanyDTO.getSubIndustryType());
			System.out.println("Contry of Incorporation : "
					+ odmsCompanyDTO.getCountryOfIncorporation());
			System.out.println("Years In Business : "
					+ odmsCompanyDTO.getYearsInBusiness());
			System.out.println("Registration Id : "
					+ odmsCompanyDTO.getRegistrationId());
			System.out.println("Registration Date : "
					+ odmsCompanyDTO.getRegistrationDate());
			System.out.println("Expiry Date : "
					+ odmsCompanyDTO.getExpiryDate());
			System.out.println("TaxId : " + odmsCompanyDTO.getTaxId());
			System.out.println("AddressLine 1 : "
					+ odmsCompanyDTO.getCompanyAddressLine1());
			System.out.println("AddressLine 2 : "
					+ odmsCompanyDTO.getCompanyAddressLine2());
			System.out.println("Country : " + odmsCompanyDTO.getCountry());
			System.out.println("State : " + odmsCompanyDTO.getState());
			System.out.println("City : " + odmsCompanyDTO.getCity());
			System.out.println("ZipCode : " + odmsCompanyDTO.getZipCode());
			System.out.println("Country code : "
					+ odmsCompanyDTO.getCountryCode());
			System.out.println("Phone Number : "
					+ odmsCompanyDTO.getPhoneNumber());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static int calculateYearsInBusiness(String businessInYears) {
		String pattern = "yyyy-MM-dd";
		java.text.SimpleDateFormat sdfObject = new java.text.SimpleDateFormat(
				pattern);
		try {
			java.util.Date firstDate = sdfObject.parse(businessInYears);
			java.util.Date secondDate = sdfObject.parse(sdfObject
					.format(new java.util.Date()));
			long millisecondsDiff = (secondDate.getTime() - firstDate.getTime());
			int yearsDiff = (int) (millisecondsDiff / (1000l * 60 * 60 * 24 * 365));
			return yearsDiff;

		} catch (Exception e) {
			System.out.println("Exception :: " + e);
		}
		return 0;
	}

	public static void setIndustryReferenceData(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		java.util.Map<String, String> industryTypeMap = new java.util.HashMap<>();
		industryTypeMap
				.put("INDUSTRY-100", "Agriculture, Forestry And Fishing");
		industryTypeMap.put("INDUSTRY-200", "Mining");
		industryTypeMap.put("INDUSTRY-300", "Construction");
		industryTypeMap.put("INDUSTRY-400", "Manufacturing");
		industryTypeMap
				.put("INDUSTRY-500", "Transportation And Communications");
		industryTypeMap.put("INDUSTRY-600", "Wholesale Trade");
		industryTypeMap.put("INDUSTRY-700", "Retail Trade");
		industryTypeMap.put("INDUSTRY-800",
				"Finance, Insurance And Real Estate");
		industryTypeMap.put("INDUSTRY-900", "Services");
		industryTypeMap.put("INDUSTRY-1000", "Public Administration");
		kcontext.setVariable("industryMap", industryTypeMap);
		java.util.Map<String, String> subIndustryTypeMap = new java.util.HashMap<>();
		subIndustryTypeMap.put("INDUSTRY-101", "Crops");
		subIndustryTypeMap.put("INDUSTRY-102",
				"Livestock And Animal Specialties");
		subIndustryTypeMap.put("INDUSTRY-103", "Agricultural Services");
		subIndustryTypeMap.put("INDUSTRY-201", "Metal Mining");
		subIndustryTypeMap.put("INDUSTRY-202", "Coal Mining");
		subIndustryTypeMap.put("INDUSTRY-203", "Oil and Gas Extraction");
		subIndustryTypeMap.put("INDUSTRY-301", "Residential Construction");
		subIndustryTypeMap.put("INDUSTRY-302",
				"Industrial Buildings and Warehouses");
		subIndustryTypeMap.put("INDUSTRY-303",
				"Highway and Street Construction");
		subIndustryTypeMap.put("INDUSTRY-401", "Meat Packing Plants");
		subIndustryTypeMap.put("INDUSTRY-402", "Canned Specialties");
		subIndustryTypeMap.put("INDUSTRY-403", "Rice Milling");
		subIndustryTypeMap.put("INDUSTRY-501", "Railroad Transportation");
		subIndustryTypeMap.put("INDUSTRY-502", "Motor Freight Transportation");
		subIndustryTypeMap.put("INDUSTRY-601", "Furniture");
		subIndustryTypeMap.put("INDUSTRY-602", "Homefurnishings");
		subIndustryTypeMap.put("INDUSTRY-603", "Office Equipment");
		subIndustryTypeMap.put("INDUSTRY-701", "Hardware Stores");
		subIndustryTypeMap.put("INDUSTRY-702", "Department Stores");
		subIndustryTypeMap.put("INDUSTRY-703", "Grocery Stores");
		subIndustryTypeMap.put("INDUSTRY-801", "Depository Institutions");
		subIndustryTypeMap.put("INDUSTRY-802", "Loan Brokers");
		subIndustryTypeMap.put("INDUSTRY-803", "Insurance Carriers");
		subIndustryTypeMap.put("INDUSTRY-901",
				"Arts, Entertainment, and Recreation");
		subIndustryTypeMap.put("INDUSTRY-902",
				"Accommodation and Food Services");
		subIndustryTypeMap.put("INDUSTRY-903", "Other Services");
		subIndustryTypeMap.put("INDUSTRY-1001", "Executive Offices");
		subIndustryTypeMap
				.put("INDUSTRY-1002", "Legal Counsel and Prosecution");
		subIndustryTypeMap.put("INDUSTRY-1003", "National Security");
		kcontext.setVariable("subIndustryMap", subIndustryTypeMap);
	}
	public static void setCompanyContactpartyId(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject partyCopmanyJSONObject = new org.json.JSONObject(
					kcontext.getVariable("partyResponse").toString());
			org.json.JSONArray contactReferencesArray = partyCopmanyJSONObject
					.optJSONArray("contactReferences");
			org.json.JSONObject contactReferencesJSONObject = contactReferencesArray
					.optJSONObject(0);
			kcontext.setVariable("companyContactPartyId",
					contactReferencesJSONObject.optString("contactPartyRef"));
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setCompanyPartyMSData(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String partyResponse) {
		try {
			com.temenos.infinityassist.sme.submitted.PartyInformationParams partyCompanyDTO = new com.temenos.infinityassist.sme.submitted.PartyInformationParams();
			org.json.JSONObject partyCopmanyJSONObject = new org.json.JSONObject(
					partyResponse);
			kcontext.setVariable("partyId",
					partyCopmanyJSONObject.optString("partyId"));
			partyCompanyDTO.setCompanyName(partyCopmanyJSONObject
					.optString("entityName"));
			partyCompanyDTO.setCompanyType(partyCopmanyJSONObject
					.optString("organisationLegalType"));
			// odmsJSONObject.optString("classifications")
			org.json.JSONArray classificationsArray = partyCopmanyJSONObject
					.optJSONArray("classifications");
			for (int i = 0; i < classificationsArray.length(); i++) {
				org.json.JSONObject classificationJSONObject = classificationsArray
						.optJSONObject(i);
				String classificationCodeValue = classificationJSONObject
						.optString("classificationCode");

				if (classificationCodeValue.startsWith("INDUSTRY")
						&& classificationCodeValue.endsWith("0")) {
					System.out.println("Industry Type value fetching");
					System.out.println("classificationCodeValue "
							+ classificationCodeValue);
					java.util.Map<String, String> industryMap = (java.util.HashMap) kcontext
							.getVariable("industryMap");
					System.out.println("industryMap output :: " + industryMap);
					String industryType = industryMap
							.get(classificationCodeValue);
					partyCompanyDTO.setIndustryType(industryType.toUpperCase());
				}
				if (classificationCodeValue.startsWith("INDUSTRY")
						&& !classificationCodeValue.endsWith("0")) {
					System.out.println("Sub-Industry Type value fetching");
					System.out.println("classificationCodeValue "
							+ classificationCodeValue);
					java.util.Map<String, String> subIndustryMap = (java.util.HashMap) kcontext
							.getVariable("subIndustryMap");
					System.out.println("subIndustryMap output :: "
							+ subIndustryMap);
					String subIndustryType = subIndustryMap
							.get(classificationCodeValue);
					partyCompanyDTO.setSubIndustryType(subIndustryType.toUpperCase());
				}
			}
			// partyCompanyDTO.setIndustryType(industryType);
			// partyCompanyDTO.setSubIndustryType(subIndustryType);
			partyCompanyDTO.setCountryOfIncorporation(partyCopmanyJSONObject
					.optString("incorporationCountry"));
			partyCompanyDTO.setRegistrationDate(partyCopmanyJSONObject
					.optString("dateOfIncorporation"));
			String yearsInBusiness = "";
			if (!(partyCopmanyJSONObject.optString("dateOfIncorporation"))
					.isEmpty()) {
				yearsInBusiness = Integer.valueOf(
						calculateYearsInBusiness(partyCopmanyJSONObject
								.optString("dateOfIncorporation"))).toString();
			}
			partyCompanyDTO.setYearsInBusiness(yearsInBusiness); // yearsInBusiness
			// set identity details data
			org.json.JSONArray partyIdentifiersDetails = partyCopmanyJSONObject
					.optJSONArray("partyIdentifiers");
			for (int i = 0; i < partyIdentifiersDetails.length(); i++) {
				org.json.JSONObject partyIdentifiersJSONObject = partyIdentifiersDetails
						.optJSONObject(i);
				String identifierType = partyIdentifiersJSONObject
						.optString("type");
				// Social Security Number type having the taxId as
				// identifierNumber
				String taxId = "";
				if (identifierType.equals("Social Security Number")) {
					taxId = partyIdentifiersJSONObject
							.optString("identifierNumber");
				}
				partyCompanyDTO.setTaxId(taxId);
				if (identifierType.equals("Registration")) {
					partyCompanyDTO
							.setRegistrationId(partyIdentifiersJSONObject
									.optString("identifierNumber"));
					partyCompanyDTO.setExpiryDate(partyIdentifiersJSONObject
							.optString("expiryDate"));
				}
			}

			// set address related details data
			org.json.JSONArray addressJSONArray = partyCopmanyJSONObject
					.optJSONArray("addresses");
			for (int i = 0; i < addressJSONArray.length(); i++) {
				org.json.JSONObject addressJSONObject = addressJSONArray
						.optJSONObject(i);
				if (addressJSONObject.optString("communicationType").equals(
						"MailingAddress")) {
					if (addressJSONObject.optJSONArray("addressFreeFormat")
							.length() == 2) {
						org.json.JSONArray addressFreeFormatArray = addressJSONObject
								.optJSONArray("addressFreeFormat");
						String address1 = (addressFreeFormatArray
								.optJSONObject(0)).optString("addressLine");
						String address2 = (addressFreeFormatArray
								.optJSONObject(1)).optString("addressLine");
						partyCompanyDTO.setCompanyAddressLine1(address1);
						partyCompanyDTO.setCompanyAddressLine2(address2);
					}
					// Externally added for addressline1 and 2 - start
					partyCompanyDTO.setCompanyAddressLine1(addressJSONObject
							.optString("buildingName"));
					partyCompanyDTO.setCompanyAddressLine2(addressJSONObject
							.optString("streetName"));
					// Externally added for addressline1 and 2 - end
					partyCompanyDTO.setCountry(addressJSONObject
							.optString("countryCode"));
					partyCompanyDTO.setState(addressJSONObject
							.optString("countrySubdivision"));
					partyCompanyDTO
							.setCity(addressJSONObject.optString("town"));
					partyCompanyDTO.setZipCode(addressJSONObject
							.optString("postalOrZipCode"));
				}
				if (addressJSONObject.optString("communicationType").equals(
						"Mobile")) {
					partyCompanyDTO.setCountryCode(addressJSONObject
							.optString("iddPrefixPhone"));
					partyCompanyDTO.setPhoneNumber(addressJSONObject
							.optString("phoneNo"));

				}
			}

			kcontext.setVariable("payloadDEPartyMSCompany", partyCompanyDTO);
			System.out.println("Company Party DTO Object Values");
			System.out.println("Company Name : "
					+ partyCompanyDTO.getCompanyName());
			System.out.println("Company Type : "
					+ partyCompanyDTO.getCompanyType());
			System.out.println("Industry Type : "
					+ partyCompanyDTO.getIndustryType());
			System.out.println("Sub-Industry Type : "
					+ partyCompanyDTO.getSubIndustryType());
			System.out.println("Contry of Incorporation : "
					+ partyCompanyDTO.getCountryOfIncorporation());
			System.out.println("Years In Business : "
					+ partyCompanyDTO.getYearsInBusiness());
			System.out.println("Registration Id : "
					+ partyCompanyDTO.getRegistrationId());
			System.out.println("Registration Date : "
					+ partyCompanyDTO.getRegistrationDate());
			System.out.println("Expiry Date : "
					+ partyCompanyDTO.getExpiryDate());
			System.out.println("TaxId : " + partyCompanyDTO.getTaxId());
			System.out.println("AddressLine 1 : "
					+ partyCompanyDTO.getCompanyAddressLine1());
			System.out.println("AddressLine 2 : "
					+ partyCompanyDTO.getCompanyAddressLine2());
			System.out.println("Country : " + partyCompanyDTO.getCountry());
			System.out.println("State : " + partyCompanyDTO.getState());
			System.out.println("City : " + partyCompanyDTO.getCity());
			System.out.println("ZipCode : " + partyCompanyDTO.getZipCode());
			System.out.println("Country code : "
					+ partyCompanyDTO.getCountryCode());
			System.out.println("Phone Number : "
					+ partyCompanyDTO.getPhoneNumber());
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void setDTOForQueueManagement(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String applicationDataStr) {
		try {
			com.temenos.infinityassist.retail.submitted.ProductQueueInfo productDTO = new com.temenos.infinityassist.retail.submitted.ProductQueueInfo();

			org.json.JSONObject applicationData = new org.json.JSONObject(
					applicationDataStr);

			org.json.JSONArray productInfoArray = applicationData
					.getJSONArray("productInfo");

			java.util.List<com.temenos.infinityassist.retail.submitted.ProductQueueInfo> productList = new java.util.ArrayList<com.temenos.infinityassist.retail.submitted.ProductQueueInfo>();

			for (int i = 0; i < productInfoArray.length(); i++) {
				org.json.JSONObject jsonObj = productInfoArray.getJSONObject(i);
				com.temenos.infinityassist.retail.submitted.ProductQueueInfo product = new com.temenos.infinityassist.retail.submitted.ProductQueueInfo();

				java.lang.String productGroup = jsonObj
						.getString("productGroup");
				product.setProductGroup(productGroup);

				if (jsonObj.has("loanAmount")) {
					java.lang.Float loanAmount = java.lang.Float
							.parseFloat(jsonObj.getString("loanAmount"));
					product.setLoanAmount(loanAmount);
				}

				productList.add(product);
			}

			kcontext.setVariable("productQueueList", productList);
			kcontext.setVariable("city", applicationData.getString("city"));
			kcontext.setVariable("state", applicationData.getString("state"));
			kcontext.setVariable("country",
					applicationData.getString("country"));

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void reviewDocumentStatus(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject jsonObject = new org.json.JSONObject(kcontext
					.getVariable("response").toString());
			org.json.JSONArray documentArray = jsonObject
					.getJSONArray("documents");
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.get("documentCategory").toString()
							.equals("prf_of_inc")
							|| docObject.get("documentCategory").toString()
									.equals("finan_statement")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType")
								+ "_"
								+ docObject.getString("partyId");
						String docStatus = docObject.get("documentStatus")
								.toString();
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
							break;
					}
				}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void getDocumentDetails(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject documentsObject = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			org.json.JSONArray documentArray = documentsObject
					.getJSONArray("documents");
			org.json.JSONObject partyRoleObject = new org.json.JSONObject(
					kcontext.getVariable("partyRoleMap").toString());
			String partyId = kcontext.getVariable("partyId").toString();
			Integer count = Integer.parseInt(kcontext.getVariable("count").toString());
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.get("documentCategory").toString()
							.equals("prf_of_add_indvid")
							|| docObject.get("documentCategory").toString()
									.equals("prf_of_add_busi")
							|| docObject.get("documentCategory").toString()
									.equals("prf_of_busi")
							|| docObject.get("documentCategory").toString()
									.equals("prf_of_iden")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType");
						String docStatus = docObject.get("documentStatus")
								.toString();
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
						break;
					}
				}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else if (partyRoleObject.get(partyId).toString().equals("9") && count > 1) {
				kcontext.setVariable("result", true);
			} else {
				kcontext.setVariable("result", false);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}
	public static void getDocumentDetailsForVerification(
			org.kie.api.runtime.process.ProcessContext kcontext) {

		try {
			org.json.JSONObject documentsObject = new org.json.JSONObject(
					kcontext.getVariable("response").toString());
			org.json.JSONArray documentArray = documentsObject
					.getJSONArray("documents");
			if (documentArray.length() > 0) {
				boolean resultFlag = false;
				java.util.HashMap<String, java.util.List<String>> docStatusMap = new java.util.HashMap<String, java.util.List<String>>();
				for (int i = 0; i < documentArray.length(); i++) {
					org.json.JSONObject docObject = documentArray
							.getJSONObject(i);
					if (docObject.get("documentCategory").toString()
							.equals("prf_of_add_indvid")
							|| docObject.get("documentCategory").toString()
									.equals("prf_of_add_busi")
							|| docObject.get("documentCategory").toString()
									.equals("prf_of_busi")) {
						String docCategoryTypeOfParty = docObject
								.getString("documentCategory")
								+ "_"
								+ docObject.getString("documentType")
								+ "_"
								+ docObject.getString("partyId");
						String docStatus = docObject.get("documentStatus")
								.toString();
						if (docStatusMap.get(docCategoryTypeOfParty) == null) {
							docStatusMap.put(docCategoryTypeOfParty,
									new java.util.ArrayList<String>());
						}
						docStatusMap.get(docCategoryTypeOfParty).add(docStatus);
					}
				}
				for (java.util.HashMap.Entry<String, java.util.List<String>> entry : docStatusMap
						.entrySet()) {
					resultFlag = false;
					java.util.List<String> values = entry.getValue();
					for (int i = 0; i < values.size(); i++) {
						String documentStatus = values.get(i);
						if (documentStatus.equals("01")) {
							resultFlag = true;
							break;
						}
					}
					if (!resultFlag) {
						break;
						}
					}
				if (resultFlag) {
					kcontext.setVariable("result", true);
				} else {
					kcontext.setVariable("result", false);
				}
			} else {
				kcontext.setVariable("result", false);
			}

		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}

	}

	public static void setCompanyPartyId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String partyRelationshipResponse) {
		try {
			String relatedPartyId = "";
			org.json.JSONObject partyRelationshipResponseJSONObj = new org.json.JSONObject(
					partyRelationshipResponse);
			org.json.JSONArray partyRelationsJSONArray = partyRelationshipResponseJSONObj
					.optJSONArray("partyRelations");
			for (int i = 0; i < partyRelationsJSONArray.length(); i++) {
				org.json.JSONObject relationJSONObj = partyRelationsJSONArray
						.optJSONObject(i);
				if (!relationJSONObj.optString("relationType").equals(
						"Subsidiary")
						&& !relationJSONObj.optString("relationType").equals(
								"SisterConcern")) {
					relatedPartyId = relationJSONObj.optString("relatedParty");
					break;
				}
			}
			kcontext.setVariable("companyPartyId", relatedPartyId);
			System.out.println("Company PartyId :: " + relatedPartyId);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}
	public static void fetchPrimaryApplicantId(
			org.kie.api.runtime.process.ProcessContext kcontext,
			String metaDataResponse) {
		try {
			org.json.JSONObject metaDataResponseJSONObj = new org.json.JSONObject(
					metaDataResponse);
			org.json.JSONArray entityItemsJSONArray = metaDataResponseJSONObj
					.optJSONArray("entityItems");
			org.json.JSONObject entityItemsJSONObject = entityItemsJSONArray
					.optJSONObject(0);
			org.json.JSONObject entryJSONObject = new org.json.JSONObject(
					entityItemsJSONObject.optString("entry"));
			String primaryApplicantString = entryJSONObject
					.optString("PrimaryApplicant");
			primaryApplicantString = primaryApplicantString
					.substring(primaryApplicantString.indexOf('_') + 1);
			kcontext.setVariable("primaryApplicantId", primaryApplicantString);
			System.out.println("Primary Applicant DigitalProfileId  :: "
					+ primaryApplicantString);
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());
		}
	}

	public static void setCoreReferenceMap(
			org.kie.api.runtime.process.ProcessContext kcontext) {
		try {
			org.json.JSONObject accountResponse = new org.json.JSONObject(
					kcontext.getVariable("accountResponse").toString());
			String accountId = accountResponse.getString("coreRefrenceId");
			String effectiveDate = accountResponse.optString("startDate");
			String maturityDate = accountResponse.optString("maturityDate");
			java.util.Map<String, String> coreReference = new java.util.HashMap<String, String>();
			coreReference.put("id", accountId);
			coreReference.put("type", "ACCOUNT");
			kcontext.setVariable("accountNumber", accountId);
			kcontext.setVariable("coreReference", coreReference);
			if (effectiveDate != null && effectiveDate.length() != 0) {
				kcontext.setVariable("startDate", effectiveDate);
				kcontext.setVariable("maturityDate", maturityDate);
			}
		} catch (Exception e) {
			System.out.println("Exception: " + e.toString());

		}
	}
		
	
}